IMPLEMENTATION
    logic_i
REFINES
    logic
SEES
    g_types ,
    g_operators ,
    io_constants ,
    lchip_interface ,
    user_ctx //,
    //inputs Take off, because don't use the inputs

    // pragma SAFETY_VARS
CONCRETE_VARIABLES
    board_0_O1 ,
         board_0_O2
INVARIANT
    board_0_O1 : uint8_t &
         board_0_O2 : uint8_t
INITIALISATION
    board_0_O1 := IO_OFF ;
         board_0_O2 := IO_OFF
OPERATIONS
    user_logic =
    BEGIN
        VAR ms_tick_cycle , s_tick_cycle , tick ,
            ms_tick_cycle2 , s_tick_cycle2 , tick2 IN

            ms_tick_cycle : ( ms_tick_cycle : uint32_t ) ;
            s_tick_cycle : ( s_tick_cycle : uint32_t ) ;
            tick : ( tick : uint32_t ) ;

            ms_tick_cycle2 : ( ms_tick_cycle2 : uint32_t ) ;
            s_tick_cycle2 : ( s_tick_cycle2 : uint32_t ) ;
            tick2 : ( tick2 : uint32_t ) ;

            ms_tick_cycle <-- get_ms_tick ;
            s_tick_cycle := ms_tick_cycle / delta_t ;
            tick := s_tick_cycle mod 2 ;

            ms_tick_cycle2 <-- get_ms_tick ;
            s_tick_cycle2 := ms_tick_cycle2 / delta_t1 ;
            tick2 := s_tick_cycle2 mod 2 ;


            IF tick = 0 THEN
               board_0_O1 := IO_ON
            ELSE
               board_0_O1 := IO_OFF
            END ;




            IF tick2 <= 0 THEN
               board_0_O2 := IO_ON
            ELSE
               board_0_O2 := IO_OFF
            END

            /*IF board_0_O1 = IO_OFF THEN
                board_0_O2 := IO_ON
            ELSE  
                board_0_O2 := IO_OFF
            END */

        END
    END ;

    po <-- get_board_0_O1 =
        BEGIN
                po := board_0_O1
        END ;

        po <-- get_board_0_O2 =
        BEGIN
                po := board_0_O2
        END
END
