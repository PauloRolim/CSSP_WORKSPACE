THEORY ProofList IS
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & WellDefinedness_user_logic.3,(_f(8) & _f(9) & _f(10) & _f(32) => _f(35));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & WellDefinedness_user_logic.2,(_f(8) & _f(9) & _f(10) & _f(32) => _f(34));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & WellDefinedness_user_logic.1,(_f(8) & _f(9) & _f(10) & _f(32) => _f(33));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.36,(_f(8) & _f(9) & _f(10) & _f(11) & _f(13) & _f(14) & _f(17) & _f(4) => _f(31));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.35,(_f(8) & _f(9) & _f(10) & _f(11) & _f(12) & _f(14) & _f(16) & _f(4) => _f(31));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.34,(_f(8) & _f(9) & _f(10) & _f(11) & _f(12) & _f(13) & _f(14) & _f(4) => _f(31));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.33,(_f(8) & _f(9) & _f(10) & _f(11) & _f(15) & _f(16) & _f(17) & _f(4) => _f(25));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.32,(_f(8) & _f(9) & _f(10) & _f(11) & _f(14) & _f(16) & _f(17) & _f(4) => _f(25));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.31,(_f(8) & _f(9) & _f(10) & _f(11) & _f(13) & _f(15) & _f(17) & _f(4) => _f(25));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.30,(_f(8) & _f(9) & _f(10) & _f(11) & _f(13) & _f(14) & _f(17) & _f(4) => _f(25));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.29,(_f(8) & _f(9) & _f(10) & _f(11) & _f(12) & _f(15) & _f(16) & _f(4) => _f(25));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.28,(_f(8) & _f(9) & _f(10) & _f(11) & _f(12) & _f(14) & _f(16) & _f(4) => _f(25));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.27,(_f(8) & _f(9) & _f(10) & _f(11) & _f(12) & _f(13) & _f(15) & _f(4) => _f(25));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.26,(_f(8) & _f(9) & _f(10) & _f(11) & _f(12) & _f(13) & _f(14) & _f(4) => _f(25));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.25,(_f(8) & _f(9) & _f(10) & _f(11) & _f(14) & _f(16) & _f(17) & _f(4) => _f(30));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.24,(_f(8) & _f(9) & _f(10) & _f(11) & _f(13) & _f(15) & _f(17) & _f(4) => _f(24));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.23,(_f(8) & _f(9) & _f(10) & _f(11) & _f(12) & _f(13) & _f(15) & _f(4) => _f(24));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.22,(_f(8) & _f(9) & _f(10) & _f(11) & _f(12) & _f(15) & _f(16) & _f(4) => _f(23));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.21,(_f(8) & _f(9) & _f(10) & _f(11) & _f(13) & _f(14) & _f(17) & _f(4) => _f(29));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.20,(_f(8) & _f(9) & _f(10) & _f(11) & _f(12) & _f(14) & _f(16) & _f(4) => _f(29));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.19,(_f(8) & _f(9) & _f(10) & _f(11) & _f(12) & _f(13) & _f(14) & _f(4) => _f(29));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.18,(_f(8) & _f(9) & _f(10) & _f(11) & _f(15) & _f(16) & _f(17) & _f(4) => _f(28));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.17,(_f(8) & _f(9) & _f(10) & _f(11) & _f(15) & _f(16) & _f(17) & _f(4) => _f(27));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.16,(_f(8) & _f(9) & _f(10) & _f(11) & _f(12) & _f(15) & _f(16) & _f(4) => _f(20));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.15,(_f(8) & _f(9) & _f(10) & _f(11) & _f(14) & _f(16) & _f(17) & _f(4) => _f(26));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.14,(_f(8) & _f(9) & _f(10) & _f(11) & _f(13) & _f(15) & _f(17) & _f(4) => _f(19));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.13,(_f(8) & _f(9) & _f(10) & _f(11) & _f(12) & _f(13) & _f(15) & _f(4) => _f(19));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.12,(_f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(4) => _f(25));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.11,(_f(8) & _f(9) & _f(10) & _f(13) & _f(17) & _f(18) & _f(4) => _f(25));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.10,(_f(8) & _f(9) & _f(10) & _f(12) & _f(16) & _f(18) & _f(4) => _f(25));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.9,(_f(8) & _f(9) & _f(10) & _f(12) & _f(13) & _f(18) & _f(4) => _f(25));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.8,(_f(8) & _f(9) & _f(10) & _f(13) & _f(17) & _f(18) & _f(4) => _f(24));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.7,(_f(8) & _f(9) & _f(10) & _f(12) & _f(13) & _f(18) & _f(4) => _f(24));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.6,(_f(8) & _f(9) & _f(10) & _f(12) & _f(16) & _f(18) & _f(4) => _f(23));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.5,(_f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(4) => _f(22));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.4,(_f(8) & _f(9) & _f(10) & _f(16) & _f(17) & _f(18) & _f(4) => _f(21));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.3,(_f(8) & _f(9) & _f(10) & _f(12) & _f(16) & _f(18) & _f(4) => _f(20));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.2,(_f(8) & _f(9) & _f(10) & _f(13) & _f(17) & _f(18) & _f(4) => _f(19));
_f(1) & _f(2) & _f(3) & _f(6) & _f(7) & Operation_user_logic.1,(_f(8) & _f(9) & _f(10) & _f(12) & _f(13) & _f(18) & _f(4) => _f(19));
_f(1) & _f(2) & _f(3) & Initialisation.1,(_f(4) => _f(5))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
((uint32_t) = (((0) .. (4294967295)))) & ((uint16_t) = (((0) .. (65535)))) & ((uint8_t) = (((0) .. (255)))) & ((STRUE) : (uint8_t)) & ((SFALSE) : (uint8_t)) & ((MAX_UINT32) : (uint32_t)) & ((MAX_UINT16) : (uint16_t)) & ((MAX_UINT8) : (uint8_t)) & ((STRUE) : (((0) .. (MAX_UINT8)))) & ((SFALSE) : (((0) .. (MAX_UINT8)))) & not(STRUE = SFALSE) & ((SBOOL) = (({STRUE}\/{SFALSE}))) & (STRUE <= 2) & (SFALSE <= 2) & ((MAX_UINT32) = (4294967295)) & ((MAX_UINT16) = (65535)) & ((MAX_UINT8) = (255)) & ((Convert_Bool) = (({((TRUE) |-> (STRUE))}\/{((FALSE) |-> (SFALSE))}))) & bitwise_sll_uint32 : (uint32_t * uint8_t) +-> uint32_t & dom(bitwise_sll_uint32) = (uint32_t * uint8_t) & ((bitwise_sll_uint32) : ((((uint32_t * uint8_t)) --> (uint32_t)))) & bitwise_srl_uint32 : (uint32_t * uint8_t) +-> uint32_t & dom(bitwise_srl_uint32) = (uint32_t * uint8_t) & ((bitwise_srl_uint32) : ((((uint32_t * uint8_t)) --> (uint32_t)))) & bitwise_not_uint32 : uint32_t +-> uint32_t & dom(bitwise_not_uint32) = uint32_t & ((bitwise_not_uint32) : (((uint32_t) --> (uint32_t)))) & bitwise_and_uint32 : (uint32_t * uint32_t) +-> uint32_t & dom(bitwise_and_uint32) = (uint32_t * uint32_t) & ((bitwise_and_uint32) : ((((uint32_t * uint32_t)) --> (uint32_t)))) & bitwise_xor_uint32 : (uint32_t * uint32_t) +-> uint32_t & dom(bitwise_xor_uint32) = (uint32_t * uint32_t) & ((bitwise_xor_uint32) : ((((uint32_t * uint32_t)) --> (uint32_t)))) & bitwise_or_uint32 : (uint32_t * uint32_t) +-> uint32_t & dom(bitwise_or_uint32) = (uint32_t * uint32_t) & ((bitwise_or_uint32) : ((((uint32_t * uint32_t)) --> (uint32_t)))) & bitwise_sll_uint16 : (uint16_t * uint8_t) +-> uint16_t & dom(bitwise_sll_uint16) = (uint16_t * uint8_t) & ((bitwise_sll_uint16) : ((((uint16_t * uint8_t)) --> (uint16_t)))) & bitwise_srl_uint16 : (uint16_t * uint8_t) +-> uint16_t & dom(bitwise_srl_uint16) = (uint16_t * uint8_t) & ((bitwise_srl_uint16) : ((((uint16_t * uint8_t)) --> (uint16_t)))) & bitwise_not_uint16 : uint16_t +-> uint16_t & dom(bitwise_not_uint16) = uint16_t & ((bitwise_not_uint16) : (((uint16_t) --> (uint16_t)))) & bitwise_and_uint16 : (uint16_t * uint16_t) +-> uint16_t & dom(bitwise_and_uint16) = (uint16_t * uint16_t) & ((bitwise_and_uint16) : ((((uint16_t * uint16_t)) --> (uint16_t)))) & bitwise_xor_uint16 : (uint16_t * uint16_t) +-> uint16_t & dom(bitwise_xor_uint16) = (uint16_t * uint16_t) & ((bitwise_xor_uint16) : ((((uint16_t * uint16_t)) --> (uint16_t)))) & bitwise_or_uint16 : (uint16_t * uint16_t) +-> uint16_t & dom(bitwise_or_uint16) = (uint16_t * uint16_t) & ((bitwise_or_uint16) : ((((uint16_t * uint16_t)) --> (uint16_t)))) & bitwise_sll_uint8 : (uint8_t * uint8_t) +-> uint8_t & dom(bitwise_sll_uint8) = (uint8_t * uint8_t) & ((bitwise_sll_uint8) : ((((uint8_t * uint8_t)) --> (uint8_t)))) & bitwise_srl_uint8 : (uint8_t * uint8_t) +-> uint8_t & dom(bitwise_srl_uint8) = (uint8_t * uint8_t) & ((bitwise_srl_uint8) : ((((uint8_t * uint8_t)) --> (uint8_t)))) & bitwise_not_uint8 : uint8_t +-> uint8_t & dom(bitwise_not_uint8) = uint8_t & ((bitwise_not_uint8) : (((uint8_t) --> (uint8_t)))) & bitwise_and_uint8 : (uint8_t * uint8_t) +-> uint8_t & dom(bitwise_and_uint8) = (uint8_t * uint8_t) & ((bitwise_and_uint8) : ((((uint8_t * uint8_t)) --> (uint8_t)))) & bitwise_xor_uint8 : (uint8_t * uint8_t) +-> uint8_t & dom(bitwise_xor_uint8) = (uint8_t * uint8_t) & ((bitwise_xor_uint8) : ((((uint8_t * uint8_t)) --> (uint8_t)))) & bitwise_or_uint8 : (uint8_t * uint8_t) +-> uint8_t & dom(bitwise_or_uint8) = (uint8_t * uint8_t) & ((bitwise_or_uint8) : ((((uint8_t * uint8_t)) --> (uint8_t)))) & add_uint32 : (uint32_t * uint32_t) +-> uint32_t & dom(add_uint32) = (uint32_t * uint32_t) & ((add_uint32) : ((((uint32_t * uint32_t)) --> (uint32_t)))) & sub_uint32 : (uint32_t * uint32_t) +-> uint32_t & dom(sub_uint32) = (uint32_t * uint32_t) & ((sub_uint32) : ((((uint32_t * uint32_t)) --> (uint32_t)))) & mul_uint32 : (uint32_t * uint32_t) +-> uint32_t & dom(mul_uint32) = (uint32_t * uint32_t) & ((mul_uint32) : ((((uint32_t * uint32_t)) --> (uint32_t)))) & add_uint16 : (uint16_t * uint16_t) +-> uint16_t & dom(add_uint16) = (uint16_t * uint16_t) & ((add_uint16) : ((((uint16_t * uint16_t)) --> (uint16_t)))) & sub_uint16 : (uint16_t * uint16_t) +-> uint16_t & dom(sub_uint16) = (uint16_t * uint16_t) & ((sub_uint16) : ((((uint16_t * uint16_t)) --> (uint16_t)))) & mul_uint16 : (uint16_t * uint16_t) +-> uint16_t & dom(mul_uint16) = (uint16_t * uint16_t) & ((mul_uint16) : ((((uint16_t * uint16_t)) --> (uint16_t)))) & add_uint8 : (uint8_t * uint8_t) +-> uint8_t & dom(add_uint8) = (uint8_t * uint8_t) & ((add_uint8) : ((((uint8_t * uint8_t)) --> (uint8_t)))) & sub_uint8 : (uint8_t * uint8_t) +-> uint8_t & dom(sub_uint8) = (uint8_t * uint8_t) & ((sub_uint8) : ((((uint8_t * uint8_t)) --> (uint8_t)))) & mul_uint8 : (uint8_t * uint8_t) +-> uint8_t & dom(mul_uint8) = (uint8_t * uint8_t) & ((mul_uint8) : ((((uint8_t * uint8_t)) --> (uint8_t)))) & ((bitwise_sll_uint32) = (%(x1,x2).(((x1) : (uint32_t)) & ((x2) : (uint8_t)) | (((x1 * (2 ** x2))) mod ((MAX_UINT32 + 1)))))) & ((bitwise_sll_uint16) = (%(x1,x2).(((x1) : (uint16_t)) & ((x2) : (uint8_t)) | (((x1 * (2 ** x2))) mod ((MAX_UINT16 + 1)))))) & ((bitwise_sll_uint8) = (%(x1,x2).(((x1) : (uint8_t)) & ((x2) : (uint8_t)) | (((x1 * (2 ** x2))) mod ((MAX_UINT8 + 1)))))) & ((bitwise_srl_uint32) = (%(x1,x2).(((x1) : (uint32_t)) & ((x2) : (uint8_t)) | (x1 / (2 ** x2))))) & ((bitwise_srl_uint16) = (%(x1,x2).(((x1) : (uint16_t)) & ((x2) : (uint8_t)) | (x1 / (2 ** x2))))) & ((bitwise_srl_uint8) = (%(x1,x2).(((x1) : (uint8_t)) & ((x2) : (uint8_t)) | (x1 / (2 ** x2))))) & ((add_uint32) = (%(x1,x2).(((x1) : (uint32_t)) & ((x2) : (uint32_t)) | (((x1 + x2)) mod ((MAX_UINT32 + 1)))))) & ((sub_uint32) = (%(x1,x2).(((x1) : (uint32_t)) & ((x2) : (uint32_t)) | (((((x1 - x2) + MAX_UINT32) + 1)) mod ((MAX_UINT32 + 1)))))) & ((mul_uint32) = (%(x1,x2).(((x1) : (uint32_t)) & ((x2) : (uint32_t)) | (((x1 * x2)) mod ((MAX_UINT32 + 1)))))) & ((add_uint16) = (%(y1,y2).(((y1) : (uint16_t)) & ((y2) : (uint16_t)) | (((y1 + y2)) mod ((MAX_UINT16 + 1)))))) & ((sub_uint16) = (%(y1,y2).(((y1) : (uint16_t)) & ((y2) : (uint16_t)) | (((((y1 - y2) + MAX_UINT16) + 1)) mod ((MAX_UINT16 + 1)))))) & ((mul_uint16) = (%(y1,y2).(((y1) : (uint16_t)) & ((y2) : (uint16_t)) | (((y1 * y2)) mod ((MAX_UINT16 + 1)))))) & ((add_uint8) = (%(y1,y2).(((y1) : (uint8_t)) & ((y2) : (uint8_t)) | (((y1 + y2)) mod ((MAX_UINT8 + 1)))))) & ((sub_uint8) = (%(y1,y2).(((y1) : (uint8_t)) & ((y2) : (uint8_t)) | (((((y1 - y2) + MAX_UINT8) + 1)) mod ((MAX_UINT8 + 1)))))) & ((mul_uint8) = (%(y1,y2).(((y1) : (uint8_t)) & ((y2) : (uint8_t)) | (((y1 * y2)) mod ((MAX_UINT8 + 1)))))) & !(ui1,ui2).(((((ui1) : (uint16_t)) & ((ui2) : (uint16_t))) => (((bitwise_and_uint16 )(((ui1) |-> (ui2))) <= ui2)))) & !(ui1,ui2).(((((ui1) : (uint32_t)) & ((ui2) : (uint32_t))) => (((bitwise_and_uint32 )(((ui1) |-> (ui2))) <= ui2)))) & ((TIME) = (uint32_t)) & ((IO_STATE) = (uint8_t)) & ((IO_ON) : (uint8_t)) & ((IO_OFF) : (uint8_t)) & not(IO_ON = IO_OFF) & ((IO_ON) : (IO_STATE)) & ((IO_OFF) : (IO_STATE)) & ((delta_t) : (uint32_t)) & not(((delta_t) = (0))) & ((delta_t1) : (uint32_t)) & not(((delta_t1) = (0)));
((ms_tick) : (uint32_t)) & ((Obstacle) : (uint8_t)) & ((Convert_Bool) : (((BOOL) +-> (uint8_t)))) & ((Convert_Bool) : (((BOOL) +-> (uint16_t)))) & ((Convert_Bool) : (((BOOL) +-> (uint32_t))));
"Refinement is correct";
((0) : (uint32_t));
((LinearVel) : (uint8_t)) & ((AngularVel) : (uint8_t)) & ((COUNTER) : (uint8_t));
((LinearVel) = (LinearVel$1)) & ((AngularVel) = (AngularVel$1)) & ((LinearVel$1) : (uint8_t)) & ((AngularVel$1) : (uint8_t)) & ((prevObstacle$1) : (uint8_t)) & ((tick$1) : (uint32_t));
((obstacle$1) : (uint8_t));
((ms_tick_cycle$1) : (uint32_t));
((s_tick_cycle$1) : (uint32_t));
((Obstacle) = (IO_OFF));
((AngularVel$1) = (IO_ON));
((Obstacle) = (IO_ON));
(((((ms_tick / delta_t1)) mod (2))) = (0));
not((((((ms_tick / delta_t1)) mod (2))) = (0)));
not(((Obstacle) = (IO_ON)));
not(((AngularVel$1) = (IO_ON)));
not(((Obstacle) = (IO_OFF)));
((((0) = (1))) => (((IO_OFF) = (IO_ON)) & ((IO_ON) = (IO_OFF)))) & ((((IO_OFF) = (IO_ON)) & ((IO_ON) = (IO_OFF))) => (((0) = (1))));
(((IO_OFF) = (IO_ON)) & ((AngularVel$1) = (IO_OFF))) or (((AngularVel$1) = (IO_ON)));
(((LinearVel$1) = (IO_ON)) & ((AngularVel$1) = (IO_OFF))) or (((LinearVel$1) = (IO_OFF)) & ((AngularVel$1) = (IO_ON)));
#(COUNTER$1).(((COUNTER$1) : (uint8_t)) & ((((COUNTER$1) = (0))) => (((LinearVel$1) = (IO_OFF)) & ((AngularVel$1) = (IO_ON)))) & ((((LinearVel$1) = (IO_OFF)) & ((AngularVel$1) = (IO_ON))) => (((COUNTER$1) = (0)))) & ((((COUNTER$1) = (1))) => (((LinearVel$1) = (IO_ON)) & ((AngularVel$1) = (IO_OFF)))) & ((((LinearVel$1) = (IO_ON)) & ((AngularVel$1) = (IO_OFF))) => (((COUNTER$1) = (1)))));
#(COUNTER$1).(((COUNTER$1) : (uint8_t)) & ((((COUNTER$1) = (0))) => (((AngularVel$1) = (IO_ON)))) & ((((AngularVel$1) = (IO_ON))) => (((COUNTER$1) = (0)))) & ((((COUNTER$1) = (1))) => (((IO_OFF) = (IO_ON)) & ((AngularVel$1) = (IO_OFF)))) & ((((IO_OFF) = (IO_ON)) & ((AngularVel$1) = (IO_OFF))) => (((COUNTER$1) = (1)))));
((0) : (uint8_t));
(((((ms_tick / delta_t1)) mod (2))) : (uint32_t));
((((1) = (0))) => (((IO_ON) = (IO_OFF)) & ((IO_OFF) = (IO_ON)))) & ((((IO_ON) = (IO_OFF)) & ((IO_OFF) = (IO_ON))) => (((1) = (0))));
(((AngularVel$1) = (IO_OFF))) or (((IO_ON) = (IO_OFF)) & ((AngularVel$1) = (IO_ON)));
#(COUNTER$1).(((COUNTER$1) : (uint8_t)) & ((((COUNTER$1) = (0))) => (((IO_ON) = (IO_OFF)) & ((AngularVel$1) = (IO_ON)))) & ((((IO_ON) = (IO_OFF)) & ((AngularVel$1) = (IO_ON))) => (((COUNTER$1) = (0)))) & ((((COUNTER$1) = (1))) => (((AngularVel$1) = (IO_OFF)))) & ((((AngularVel$1) = (IO_OFF))) => (((COUNTER$1) = (1)))));
#(COUNTER$1).(((COUNTER$1) : (uint8_t)) & ((((COUNTER$1) = (0))) => (((IO_OFF) = (IO_ON)))) & ((((IO_OFF) = (IO_ON))) => (((COUNTER$1) = (0)))) & ((((COUNTER$1) = (1))) => (((IO_OFF) = (IO_ON)))) & ((((IO_OFF) = (IO_ON))) => (((COUNTER$1) = (1)))));
((1) : (uint8_t));
((IO_OFF) = (IO_ON));
"Operation is well defined";
not(delta_t1 = 0);
(0 <= (ms_tick / delta_t1));
(1 <= 2)
END
&
THEORY EnumerateX
END
