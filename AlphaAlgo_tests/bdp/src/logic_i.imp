IMPLEMENTATION
    logic_i
REFINES
    logic
SEES
    g_types ,
    g_operators ,
    io_constants ,
    lchip_interface ,
    user_ctx ,
    inputs

    // pragma SAFETY_VARS
CONCRETE_VARIABLES
    board_0_O1 ,
        board_0_O2 ,
        board_0_O3 ,
        board_0_O4 ,
        board_0_O5 ,
        board_0_O6 ,
        board_0_O7 ,
        board_0_O8 ,

        smstate ,
    MBC ,

    cycle_timer ,
    first_time ,

    ms_tick_cycle ,
    s_tick_cycle ,
    tick

INVARIANT
    board_0_O1 : uint8_t &
        board_0_O2 : uint8_t &
        board_0_O3 : uint8_t &
        board_0_O4 : uint8_t &
        board_0_O5 : uint8_t &
        board_0_O6 : uint8_t &
        board_0_O7 : uint8_t &
        board_0_O8 : uint8_t &

        smstate : STATE &
    MBC : uint32_t &

    cycle_timer : uint32_t &
    first_time : BOOL &

    ms_tick_cycle : uint32_t &
    s_tick_cycle  : uint32_t &
    tick          : uint32_t

INITIALISATION
    board_0_O1 := IO_OFF ;
        board_0_O2 := IO_OFF ;
        board_0_O3 := IO_OFF ;
        board_0_O4 := IO_OFF ;
        board_0_O5 := IO_OFF ;
        board_0_O6 := IO_OFF ;
        board_0_O7 := IO_OFF ;
        board_0_O8 := IO_OFF ;

        smstate := INIT ;
    MBC := 0 ;

    cycle_timer := 0 ;
    first_time := TRUE ;

    ms_tick_cycle := 0 ;
    s_tick_cycle  := 0 ;
    tick          := 0


LOCAL_OPERATIONS

    reset_outputs =
    BEGIN
        board_0_O1 :: uint8_t ||
            board_0_O2 :: uint8_t ||
            board_0_O3 :: uint8_t ||
            board_0_O4 :: uint8_t ||
            board_0_O5 :: uint8_t ||
            board_0_O6 :: uint8_t ||
            board_0_O7 :: uint8_t ||
            board_0_O8 :: uint8_t
    END ;

    avoid =
    BEGIN
        board_0_O7 :: uint8_t
    END ;

    elapsed <-- since ( timer ) =
    PRE timer : uint32_t & elapsed : uint32_t
    THEN
        elapsed :: uint32_t
    END ;

    o2 , o1 , o0 <-- nat_3_bits_to_bin_3_bits ( nn ) =
    PRE nn : uint32_t & nn : ( 0 .. 3 )
        & o2 : uint8_t & o1 : uint8_t & o0 : uint8_t
    THEN
        o2 :: uint8_t
        || o1 :: uint8_t
        || o0 :: uint8_t
    END ;

    moveForward ( l_linear ) =
    PRE l_linear : uint32_t & l_linear : 0 .. 3
    THEN
         board_0_O1 :: uint8_t ||
         board_0_O2 :: uint8_t ||
         board_0_O3 :: uint8_t
    END ;

    turn ( l_angular ) =
    PRE l_angular : uint32_t & l_angular : 0 .. 3
    THEN
        board_0_O4 :: uint8_t ||
        board_0_O5 :: uint8_t ||
        board_0_O6 :: uint8_t

    END ;

    state_machine =
    PRE
        MBC     : uint32_t &
        smstate : STATE &
        cycle_timer : uint32_t &
        lv : uint32_t & lv : 0 .. 3 &
        av : uint32_t & av : 0 .. 3 &
        board_0_O1      : uint8_t &
        board_0_O2 : uint8_t &
        board_0_O3 : uint8_t &
        board_0_O4 : uint8_t &
        board_0_O5 : uint8_t &
        board_0_O6 : uint8_t &
        board_0_O7 : uint8_t &
        board_0_O8 : uint8_t
    THEN
        board_0_O1      :: uint8_t ||
        board_0_O2 :: uint8_t ||
        board_0_O3 :: uint8_t ||
        board_0_O4 :: uint8_t ||
        board_0_O5 :: uint8_t ||
        board_0_O6 :: uint8_t ||
        board_0_O7 :: uint8_t ||
        board_0_O8 :: uint8_t ||
        smstate :: STATE ||
        MBC     :: uint32_t ||
        cycle_timer :: uint32_t ||
        first_time :: BOOL
    END ;

    communication =
    PRE ms_tick_cycle : uint32_t &
        s_tick_cycle  : uint32_t &
        tick          : uint32_t
    THEN
        ms_tick_cycle :: uint32_t ||
        s_tick_cycle  :: uint32_t ||
        tick          :: uint32_t
    END ;

    neighboursNumber <-- infoNeighbours =
    PRE neighboursNumber : uint8_t
    THEN
        neighboursNumber :: uint8_t
    END

OPERATIONS

    reset_outputs =
    BEGIN
        board_0_O1 := IO_OFF ;
            board_0_O2 := IO_OFF ;
            board_0_O3 := IO_OFF ;
            board_0_O4 := IO_OFF ;
            board_0_O5 := IO_OFF ;
            board_0_O6 := IO_OFF ;
            board_0_O7 := IO_OFF ;
            board_0_O8 := IO_OFF
    END ;

    avoid =
    BEGIN
        board_0_O7 := IO_ON
    END ;

    elapsed <-- since ( timer ) =
    BEGIN
        elapsed : ( elapsed : uint32_t ) ;
        VAR local_time IN
            local_time : ( local_time : uint32_t ) ;

            local_time <-- get_ms_tick ;
            elapsed := sub_uint32 ( local_time , timer )
        END
    END ;


    // Transforms 3 bits unsigned integers into 3 bits
    o2 , o1 , o0 <-- nat_3_bits_to_bin_3_bits ( nn ) =
    BEGIN
        o2 : ( o2 : uint8_t ) ;
        o1 : ( o1 : uint8_t ) ;
        o0 : ( o0 : uint8_t ) ;

       VAR o_aux IN
            o_aux : ( o_aux : uint32_t ) ;

            o_aux := nn mod 2 ;
            IF ( o_aux = 0 ) THEN
                o0 := IO_OFF
            ELSE
                o0 := IO_ON
            END ;

            o_aux := ( nn / 2 ) ;
            o_aux := o_aux mod 2 ;
            IF ( o_aux = 0 ) THEN
                o1 := IO_OFF
            ELSE
                o1 := IO_ON
            END ;

            o_aux := ( nn / 4 ) ;
            o_aux := o_aux mod 2 ;
            IF ( o_aux = 0 ) THEN
                o2 := IO_OFF
            ELSE
                o2 := IO_ON
            END
        END
    END ;

    moveForward ( l_linear ) =
    BEGIN
        board_0_O3 ,
        board_0_O2 ,
        board_0_O1 <-- nat_3_bits_to_bin_3_bits ( l_linear )
    END ;

    turn ( l_angular ) =
    BEGIN
        board_0_O6 ,
        board_0_O5 ,
        board_0_O4 <-- nat_3_bits_to_bin_3_bits ( l_angular )
    END ;

    state_machine =
    BEGIN
        IF smstate = INIT THEN
            moveForward ( lv ) ;
            smstate := EXEC_1
        ELSIF smstate = EXEC_1 THEN
            VAR local_obstacle IN
                local_obstacle : ( local_obstacle : uint8_t ) ;

                local_obstacle <-- get_board_0_I1 ;
                IF local_obstacle = IO_ON THEN
                    MBC <-- get_ms_tick ;
                    avoid ;
                    turn ( av ) ;

                    smstate := EXEC_2
                ELSIF local_obstacle = IO_OFF THEN
                    smstate := EXEC_1
                ELSE skip
                END
            END
        ELSIF smstate = EXEC_2 THEN
            VAR since_value IN
                since_value : ( since_value : uint32_t ) ;

                since_value <-- since ( MBC ) ;
                VAR pi_div_av IN
                    pi_div_av : ( pi_div_av : uint32_t ) ;
                    pi_div_av := pi / av ;
                    IF since_value < pi_div_av THEN
                        smstate := EXEC_2
                    ELSIF pi_div_av <= since_value THEN
                        moveForward ( lv ) ;
                        smstate := EXEC_1
                    ELSE skip
                    END
                END
            END
        ELSE skip
        END
    END ;


    communication =
        BEGIN
            MBC <-- get_ms_tick ;
            ms_tick_cycle := 1000 ;
            s_tick_cycle := MBC / ms_tick_cycle ;
            tick := s_tick_cycle mod 2 ;

            IF tick = 0 THEN
               board_0_O8 := IO_ON
            ELSE
               board_0_O8 := IO_OFF
            END
        END ;

    neighboursNumber <-- infoNeighbours = //funcao de deteccao de vizinhos
        BEGIN
            VAR local_input IN
                local_input : ( local_input : uint8_t ) ;

                local_input <-- get_board_0_I3 ;
                IF local_input = IO_ON THEN
                   neighboursNumber := add_uint8 ( neighboursNumber , 1 )
                END
            END
        END ;

    user_logic =
        BEGIN
            IF first_time = TRUE THEN
                reset_outputs ;
                state_machine ;
                cycle_timer <-- get_ms_tick ;
                first_time := FALSE
            ELSE
                VAR time_elapsed , cycle_duration IN
                    time_elapsed : ( time_elapsed : uint32_t ) ;
                    cycle_duration : ( cycle_duration : uint32_t ) ;

                    time_elapsed <-- since ( cycle_timer ) ;
                    cycle_duration := mul_uint32 ( SimSMovement_cycle_def , cycle_unit ) ;

                    IF ( cycle_duration <= time_elapsed ) THEN
                        reset_outputs ;
                        state_machine ;
                        cycle_timer <-- get_ms_tick
                    END
                END
            END
        END ;

    po <-- get_board_0_O1 =
        BEGIN
                po := board_0_O1
        END ;

        po <-- get_board_0_O2 =
        BEGIN
                po := board_0_O2
        END ;

        po <-- get_board_0_O3 =
        BEGIN
                po := board_0_O3
        END ;

        po <-- get_board_0_O4 =
        BEGIN
                po := board_0_O4
        END ;

        po <-- get_board_0_O5 =
        BEGIN
                po := board_0_O5
        END ;

        po <-- get_board_0_O6 =
        BEGIN
                po := board_0_O6
        END ;

        po <-- get_board_0_O7 =
        BEGIN
                po := board_0_O7
        END ;

        po <-- get_board_0_O8 =
        BEGIN
                po := board_0_O8
        END
END
