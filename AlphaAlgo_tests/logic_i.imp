IMPLEMENTATION
    logic_i
REFINES
    logic
SEES
    g_types,
    g_operators,
    io_constants,
    lchip_interface,
    user_ctx,
    inputs

    // pragma SAFETY_VARS
CONCRETE_VARIABLES
    board_0_O1,
	board_0_O2,
	board_0_O3,
	board_0_O4,
	board_0_O5,
	board_0_O6,
	board_0_O7,
	board_0_O8,
	
	smstate,
    MBC, //model variable
    current_time, // Counts time according to the master clock
    my_clock,     // stores the last signal (IO_ON or IO_OFF) received
    
    cycle_timer,
    first_time,
    
    ms_tick_cycle,//translate variables
    s_tick_cycle,
    tick,
    
    obst_position //model variable
    
INVARIANT
    board_0_O1 : uint8_t &
	board_0_O2 : uint8_t &
	board_0_O3 : uint8_t &
	board_0_O4 : uint8_t &
	board_0_O5 : uint8_t &
	board_0_O6 : uint8_t &
	board_0_O7 : uint8_t &
	board_0_O8 : uint8_t &
	
	smstate:STATE &
    MBC:uint32_t &
    current_time:uint32_t &
    my_clock:uint8_t&
    
    cycle_timer:uint32_t &
    first_time: BOOL &
    
    ms_tick_cycle : uint32_t &
    s_tick_cycle  : uint32_t &
    tick          : uint32_t &
    
    obst_position: POSITION
    
INITIALISATION
    board_0_O1 := IO_OFF;
	board_0_O2 := IO_OFF;
	board_0_O3 := IO_OFF;
	board_0_O4 := IO_OFF;
	board_0_O5 := IO_OFF;
	board_0_O6 := IO_OFF;
	board_0_O7 := IO_OFF;
	board_0_O8 := IO_OFF;
	
	smstate := INIT;
    MBC := 0;
    current_time := 0;
    my_clock := 0;
    
    cycle_timer := 0;
    first_time := TRUE;
    
    ms_tick_cycle := 0;
    s_tick_cycle  := 0;
    tick          := 0 ;
    
    obst_position := LEFT
    
    
LOCAL_OPERATIONS
    
    reset_outputs = 
    BEGIN
       board_0_O1 :: uint8_t ||
	   board_0_O2 :: uint8_t ||
	   board_0_O3 :: uint8_t ||
	   board_0_O4 :: uint8_t ||
	   board_0_O5 :: uint8_t ||
	   board_0_O6 :: uint8_t ||
	   board_0_O7 :: uint8_t ||
	   board_0_O8 :: uint8_t 
    END;    
    
    avoid = 
    BEGIN
        board_0_O7 :: uint8_t
    END;
    
    elapsed <-- since(timer) = 
    PRE timer:uint32_t & elapsed:uint32_t
    THEN
        elapsed::uint32_t
    END;
    
    
    // Logical and (&)
    result <-- land(pp,qq) = 
    PRE pp:BOOL & qq:BOOL & result:BOOL
    THEN
        result::BOOL
    END;
    
    o2, o1, o0 <-- nat_3_bits_to_bin_3_bits(nn) = 
    PRE nn:uint32_t & nn:(-4..3) 
        & o2:uint8_t & o1:uint8_t & o0:uint8_t
    THEN
        o2::uint8_t
        || o1::uint8_t
        || o0::uint8_t
    END;
    
    move(l_lv, l_av) = 
    PRE l_lv:uint32_t & l_lv:0..3 & l_av:uint32_t & l_av:(-4..3)
    THEN
         board_0_O1 :: uint8_t ||
         board_0_O2 :: uint8_t ||
         board_0_O3 :: uint8_t ||
         board_0_O4 :: uint8_t ||
         board_0_O5 :: uint8_t ||
         board_0_O6 :: uint8_t 
               
    END;
    
    read_master_clock = 
    BEGIN
        current_time::uint32_t ||
        my_clock::uint8_t
    END;
    
    MovimentAndAvoidance = 
    PRE 
        MBC     : uint32_t & 
        smstate : STATE &
        cycle_timer : uint32_t &
        lv:uint32_t & lv:(-3..3) &
        av:uint32_t & av:(-3..3) &
        board_0_O1 : uint8_t &
        board_0_O2 : uint8_t &
        board_0_O3 : uint8_t &
        board_0_O4 : uint8_t &
        board_0_O5 : uint8_t &
        board_0_O6 : uint8_t &
        board_0_O7 : uint8_t &
        board_0_O8 : uint8_t 
    THEN
        board_0_O1      :: uint8_t ||
        board_0_O2 :: uint8_t ||
        board_0_O3 :: uint8_t ||
        board_0_O4 :: uint8_t ||
        board_0_O5 :: uint8_t ||
        board_0_O6 :: uint8_t ||
        board_0_O7 :: uint8_t ||
        board_0_O8 :: uint8_t || 
        smstate :: STATE ||
        MBC     :: uint32_t ||
        cycle_timer :: uint32_t ||
        first_time :: BOOL        
    END;
    
    /*communication =
    PRE ms_tick_cycle : uint32_t &
        s_tick_cycle  : uint32_t &
        tick          : uint32_t  
    THEN
        ms_tick_cycle :: uint32_t ||
        s_tick_cycle  :: uint32_t ||
        tick          :: uint32_t
    END;*/
    
    neighboursNumber <-- infoNeighbours = 
    PRE neighboursNumber : uint8_t
    THEN
        neighboursNumber :: uint8_t
    END    

OPERATIONS
    
    reset_outputs = 
    BEGIN
        board_0_O1 := IO_OFF;
	    board_0_O2 := IO_OFF;
	    board_0_O3 := IO_OFF;
	    board_0_O4 := IO_OFF;
	    board_0_O5 := IO_OFF;
	    board_0_O6 := IO_OFF;
	    board_0_O7 := IO_OFF;
	    board_0_O8 := IO_OFF
    END;    
    
    avoid = 
    BEGIN
        board_0_O7 := IO_ON
    END;
    
    elapsed <-- since(timer) = 
    BEGIN
        elapsed:(elapsed:uint32_t);
        VAR local_time IN 
            local_time:(local_time:uint32_t);
            
            local_time <-- get_ms_tick;
            elapsed := sub_uint32(local_time, timer)
        END        
    END;    
    
    // Logical and (&)
    result <-- land(pp,qq) = 
    BEGIN
        result := FALSE;
        IF (pp = TRUE) THEN 
            IF (qq = TRUE) THEN
                result := TRUE
            END
        END
    END;
    
    // Transforms 3 bits unsigned integers into 3 bits
    o2, o1, o0 <-- nat_3_bits_to_bin_3_bits(nn) = 
    BEGIN
        o2:(o2:uint8_t);
        o1:(o1:uint8_t);
        o0:(o0:uint8_t);
        
       VAR o_aux IN
            o_aux:(o_aux:uint32_t);
            
            IF (nn = 0) THEN
                o2:= IO_OFF;
                o1:= IO_OFF;
                o0:= IO_OFF
            END;     
            
            IF (nn < 0) THEN
            o2 := IO_ON;
            
                o_aux := sub_uint32(0,nn); //try to convert an negative interger into positive
                o_aux := o_aux mod 2;    
                IF (o_aux = 0) THEN 
                    o0 := IO_OFF
                ELSE
                    o0 := IO_ON
                END;
                        
                o_aux := (nn / 2);
                o_aux := o_aux mod 2;
                IF (o_aux = 0) THEN 
                    o1 := IO_OFF
                ELSE
                    o1 := IO_ON
                END
                
            END;
        
            IF (0 < nn) THEN
            o2 := IO_OFF;    
                
            o_aux := nn mod 2;    
                IF (o_aux = 0) THEN 
                    o0 := IO_OFF
                ELSE
                    o0 := IO_ON
                END;
                        
                o_aux := (nn / 2);
                o_aux := o_aux mod 2;
                IF (o_aux = 0) THEN 
                    o1 := IO_OFF
                ELSE
                    o1 := IO_ON
                END
            
            END
        
        END
    END;
    
    move(l_lv, l_av) = 
    BEGIN
        board_0_O3,
        board_0_O2,
        board_0_O1 <-- nat_3_bits_to_bin_3_bits(l_lv);
        board_0_O6,
        board_0_O5,
        board_0_O4 <-- nat_3_bits_to_bin_3_bits(l_av)
    END;
    
    read_master_clock = 
    BEGIN
        VAR master_clock IN
            master_clock:(master_clock:uint8_t);
            
            master_clock <-- get_board_0_I10;
            
            IF master_clock = my_clock THEN
                skip
            ELSE
                current_time := add_uint32(current_time, 1);
                my_clock := master_clock
            END                
        END
    END;
    
    MovimentAndAvoidance = 
    BEGIN
        IF smstate = INIT THEN //Start of state machinte
            MBC:= 0;//MBC must be reset!
            move(lv,0); //SMove state
            smstate := DMove;
            
            IF smstate = DMove THEN //DMove state
                
                VAR since_MBC_clock,
                    local_obstacle_l,
                    local_obstacle_r     IN
                    
                    since_MBC_clock:(since_MBC_clock:uint32_t);
                    
                    local_obstacle_l:(local_obstacle_l:uint8_t);
                    local_obstacle_r:(local_obstacle_r:uint8_t);
                
                    since_MBC_clock <-- since(MBC);
                    
                    local_obstacle_l <-- get_board_0_I1;
                    local_obstacle_r <-- get_board_0_I2;
                
                    IF local_obstacle_l = IO_ON THEN //Junction decision
                       obst_position := LEFT; 
                       smstate:= Avoid
                    
                    ELSIF local_obstacle_r = IO_ON THEN //Junction decision
                       obst_position := RIGHT;
                       smstate := Avoid
                       
                    ELSE skip   
                    END
                 END    
                    
            ELSE
              smstate:= DMove //return to Dmove itself
            END;
            
            IF smstate = Avoid THEN //Avoid state
               
               IF obst_position = LEFT THEN
                  move(0,av); //action of Avoid
                  smstate := Wait
                  
               ELSIF obst_position = RIGHT THEN
                   move(0,av);//negative value of av must be set, in some way...
                   smstate := Wait
               ELSE skip
               END    
               
            END;    
            
            IF smstate = Wait THEN
               skip
            ELSE 
               smstate := INIT    
            END
            
        END
    END;
       
    
    /*communication = 
        BEGIN 
            MBC <-- get_ms_tick;
            ms_tick_cycle := 1000;
            s_tick_cycle := MBC / ms_tick_cycle;
            tick := s_tick_cycle mod 2;
            
            IF tick = 0 THEN
               board_0_O8 := IO_ON
            ELSE
               board_0_O8 := IO_OFF 
            END   
        END;*/
        
    neighboursNumber <-- infoNeighbours = //function to detect neighbours
        BEGIN
            VAR local_input IN 
                local_input:(local_input:uint8_t);
                
                local_input <-- get_board_0_I3;
                IF local_input = IO_ON THEN
                   neighboursNumber := add_uint8(neighboursNumber,1)
                END    
            END    
        END;    
    
    user_logic = 
        BEGIN
           IF first_time = TRUE THEN
                reset_outputs;
                MovimentAndAvoidance;
                cycle_timer <-- get_ms_tick;
                first_time := FALSE
            ELSE
                VAR time_elapsed, cycle_duration IN 
                    time_elapsed:(time_elapsed:uint32_t);
                    cycle_duration:(cycle_duration:uint32_t);
                
                    time_elapsed <-- since(cycle_timer);
                    cycle_duration := mul_uint32(SimSMovement_cycle_def,cycle_unit);
                
                    IF (cycle_duration <= time_elapsed) THEN
                        reset_outputs;
                        MovimentAndAvoidance;
                        cycle_timer <-- get_ms_tick
                    END
                END
            END 
        END;

    po <-- get_board_0_O1 =
	BEGIN
		po := board_0_O1
	END;

	po <-- get_board_0_O2 =
	BEGIN
		po := board_0_O2
	END;

	po <-- get_board_0_O3 =
	BEGIN
		po := board_0_O3
	END;

	po <-- get_board_0_O4 =
	BEGIN
		po := board_0_O4
	END;

	po <-- get_board_0_O5 =
	BEGIN
		po := board_0_O5
	END;

	po <-- get_board_0_O6 =
	BEGIN
		po := board_0_O6
	END;

	po <-- get_board_0_O7 =
	BEGIN
		po := board_0_O7
	END;

	po <-- get_board_0_O8 =
	BEGIN
		po := board_0_O8
	END
END
