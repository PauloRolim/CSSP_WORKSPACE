Normalised(
THEORY MagicNumberX IS
  MagicNumber(Implementation(logic_i))==(3.5)
END
&
THEORY UpperLevelX IS
  First_Level(Implementation(logic_i))==(Machine(logic));
  Level(Implementation(logic_i))==(1);
  Upper_Level(Implementation(logic_i))==(Machine(logic))
END
&
THEORY LoadedStructureX IS
  Implementation(logic_i)
END
&
THEORY ListSeesX IS
  List_Sees(Implementation(logic_i))==(g_types,g_operators,io_constants,lchip_interface,user_ctx,inputs)
END
&
THEORY ListIncludesX IS
  List_Includes(Implementation(logic_i))==(?);
  Inherited_List_Includes(Implementation(logic_i))==(?)
END
&
THEORY ListPromotesX IS
  List_Promotes(Implementation(logic_i))==(?)
END
&
THEORY ListExtendsX IS
  List_Extends(Implementation(logic_i))==(?)
END
&
THEORY ListVariablesX IS
  External_Context_List_Variables(Implementation(logic_i))==(?);
  Context_List_Variables(Implementation(logic_i))==(?);
  Abstract_List_Variables(Implementation(logic_i))==(board_0_O8,board_0_O7,board_0_O6,board_0_O5,board_0_O4,board_0_O3,board_0_O2,board_0_O1);
  Local_List_Variables(Implementation(logic_i))==(?);
  List_Variables(Implementation(logic_i))==(?);
  External_List_Variables(Implementation(logic_i))==(?)
END
&
THEORY ListVisibleVariablesX IS
  Inherited_List_VisibleVariables(Implementation(logic_i))==(?);
  Abstract_List_VisibleVariables(Implementation(logic_i))==(?);
  External_List_VisibleVariables(Implementation(logic_i))==(?);
  Expanded_List_VisibleVariables(Implementation(logic_i))==(?);
  List_VisibleVariables(Implementation(logic_i))==(o_IObject_stop,o_IMove_disableCollisionDetection,o_IMove_enableCollisionDetection,o_IMove_avoid,o_IMove_turn_angular_6,o_IMove_turn_angular_5,o_IMove_turn_angular_4,o_IMove_turn_angular_3,o_IMove_turn_angular_2,o_IMove_turn_angular_1,o_IMove_turn_angular_0,o_IMove_turn,o_IMove_moveForward_linear_6,o_IMove_moveForward_linear_5,o_IMove_moveForward_linear_4,o_IMove_moveForward_linear_3,o_IMove_moveForward_linear_2,o_IMove_moveForward_linear_1,o_IMove_moveForward_linear_0,o_IMove_moveForward,i_IObject_collisionDetected,DTurning_clock,segment,D_,C_,SimSquare_cycle_timer,first_time,smstate,my_clock,current_time,board_0_O8,board_0_O7,board_0_O6,board_0_O5,board_0_O4,board_0_O3,board_0_O2,board_0_O1);
  Internal_List_VisibleVariables(Implementation(logic_i))==(o_IObject_stop,o_IMove_disableCollisionDetection,o_IMove_enableCollisionDetection,o_IMove_avoid,o_IMove_turn_angular_6,o_IMove_turn_angular_5,o_IMove_turn_angular_4,o_IMove_turn_angular_3,o_IMove_turn_angular_2,o_IMove_turn_angular_1,o_IMove_turn_angular_0,o_IMove_turn,o_IMove_moveForward_linear_6,o_IMove_moveForward_linear_5,o_IMove_moveForward_linear_4,o_IMove_moveForward_linear_3,o_IMove_moveForward_linear_2,o_IMove_moveForward_linear_1,o_IMove_moveForward_linear_0,o_IMove_moveForward,i_IObject_collisionDetected,DTurning_clock,segment,D_,C_,SimSquare_cycle_timer,first_time,smstate,my_clock,current_time,board_0_O8,board_0_O7,board_0_O6,board_0_O5,board_0_O4,board_0_O3,board_0_O2,board_0_O1)
END
&
THEORY ListInvariantX IS
  Gluing_Seen_List_Invariant(Implementation(logic_i))==(btrue);
  Expanded_List_Invariant(Implementation(logic_i))==(btrue);
  Abstract_List_Invariant(Implementation(logic_i))==(board_0_O1: uint8_t & board_0_O2: uint8_t & board_0_O3: uint8_t & board_0_O4: uint8_t & board_0_O5: uint8_t & board_0_O6: uint8_t & board_0_O7: uint8_t & board_0_O8: uint8_t);
  Context_List_Invariant(Implementation(logic_i))==(ms_tick: uint32_t & board_0_I1: uint8_t & board_0_I2: uint8_t & board_0_I3: uint8_t & board_0_I4: uint8_t & board_0_I5: uint8_t & board_0_I6: uint8_t & board_0_I7: uint8_t & board_0_I8: uint8_t & board_0_I9: uint8_t & board_0_I10: uint8_t & board_0_I11: uint8_t & board_0_I12: uint8_t & board_0_I13: uint8_t & board_0_I14: uint8_t & board_0_I15: uint8_t & board_0_I16: uint8_t & board_0_I17: uint8_t & board_0_I18: uint8_t & board_0_I19: uint8_t & board_0_I20: uint8_t);
  List_Invariant(Implementation(logic_i))==(board_0_O1: uint8_t & board_0_O2: uint8_t & board_0_O3: uint8_t & board_0_O4: uint8_t & board_0_O5: uint8_t & board_0_O6: uint8_t & board_0_O7: uint8_t & board_0_O8: uint8_t & current_time: uint32_t & my_clock: uint8_t & smstate: STATE & first_time: BOOL & SimSquare_cycle_timer: uint32_t & C_: uint32_t & D_: uint32_t & segment: uint32_t & DTurning_clock: uint32_t & i_IObject_collisionDetected: uint8_t & o_IMove_moveForward: uint8_t & o_IMove_moveForward_linear_0: uint8_t & o_IMove_moveForward_linear_1: uint8_t & o_IMove_moveForward_linear_2: uint8_t & o_IMove_moveForward_linear_3: uint8_t & o_IMove_moveForward_linear_4: uint8_t & o_IMove_moveForward_linear_5: uint8_t & o_IMove_moveForward_linear_6: uint8_t & o_IMove_turn: uint8_t & o_IMove_turn_angular_0: uint8_t & o_IMove_turn_angular_1: uint8_t & o_IMove_turn_angular_2: uint8_t & o_IMove_turn_angular_3: uint8_t & o_IMove_turn_angular_4: uint8_t & o_IMove_turn_angular_5: uint8_t & o_IMove_turn_angular_6: uint8_t & o_IMove_avoid: uint8_t & o_IMove_enableCollisionDetection: uint8_t & o_IMove_disableCollisionDetection: uint8_t & o_IObject_stop: uint8_t)
END
&
THEORY ListAssertionsX IS
  Expanded_List_Assertions(Implementation(logic_i))==(btrue);
  Abstract_List_Assertions(Implementation(logic_i))==(btrue);
  Context_List_Assertions(Implementation(logic_i))==(Convert_Bool: BOOL +-> uint8_t & Convert_Bool: BOOL +-> uint16_t & Convert_Bool: BOOL +-> uint32_t);
  List_Assertions(Implementation(logic_i))==(btrue)
END
&
THEORY ListCoverageX IS
  List_Coverage(Implementation(logic_i))==(btrue)
END
&
THEORY ListExclusivityX IS
  List_Exclusivity(Implementation(logic_i))==(btrue)
END
&
THEORY ListInitialisationX IS
  Expanded_List_Initialisation(Implementation(logic_i))==((IO_OFF: INT | board_0_O1:=IO_OFF);(IO_OFF: INT | board_0_O2:=IO_OFF);(IO_OFF: INT | board_0_O3:=IO_OFF);(IO_OFF: INT | board_0_O4:=IO_OFF);(IO_OFF: INT | board_0_O5:=IO_OFF);(IO_OFF: INT | board_0_O6:=IO_OFF);(IO_OFF: INT | board_0_O7:=IO_OFF);(IO_OFF: INT | board_0_O8:=IO_OFF);(0: INT | current_time:=0);(IO_OFF: INT | my_clock:=IO_OFF);smstate:=INIT;first_time:=TRUE;(0: INT | SimSquare_cycle_timer:=0);(0: INT | C_:=0);(0: INT | D_:=0);(0: INT | segment:=0);(0: INT | DTurning_clock:=0);(IO_OFF: INT | i_IObject_collisionDetected:=IO_OFF);(IO_OFF: INT | o_IMove_moveForward:=IO_OFF);(IO_OFF: INT | o_IMove_moveForward_linear_0:=IO_OFF);(IO_OFF: INT | o_IMove_moveForward_linear_1:=IO_OFF);(IO_OFF: INT | o_IMove_moveForward_linear_2:=IO_OFF);(IO_OFF: INT | o_IMove_moveForward_linear_3:=IO_OFF);(IO_OFF: INT | o_IMove_moveForward_linear_4:=IO_OFF);(IO_OFF: INT | o_IMove_moveForward_linear_5:=IO_OFF);(IO_OFF: INT | o_IMove_moveForward_linear_6:=IO_OFF);(IO_OFF: INT | o_IMove_turn:=IO_OFF);(IO_OFF: INT | o_IMove_turn_angular_0:=IO_OFF);(IO_OFF: INT | o_IMove_turn_angular_1:=IO_OFF);(IO_OFF: INT | o_IMove_turn_angular_2:=IO_OFF);(IO_OFF: INT | o_IMove_turn_angular_3:=IO_OFF);(IO_OFF: INT | o_IMove_turn_angular_4:=IO_OFF);(IO_OFF: INT | o_IMove_turn_angular_5:=IO_OFF);(IO_OFF: INT | o_IMove_turn_angular_6:=IO_OFF);(IO_OFF: INT | o_IMove_avoid:=IO_OFF);(IO_OFF: INT | o_IMove_enableCollisionDetection:=IO_OFF);(IO_OFF: INT | o_IMove_disableCollisionDetection:=IO_OFF);(IO_OFF: INT | o_IObject_stop:=IO_OFF));
  Context_List_Initialisation(Implementation(logic_i))==(skip);
  List_Initialisation(Implementation(logic_i))==(board_0_O1:=IO_OFF;board_0_O2:=IO_OFF;board_0_O3:=IO_OFF;board_0_O4:=IO_OFF;board_0_O5:=IO_OFF;board_0_O6:=IO_OFF;board_0_O7:=IO_OFF;board_0_O8:=IO_OFF;current_time:=0;my_clock:=IO_OFF;smstate:=INIT;first_time:=TRUE;SimSquare_cycle_timer:=0;C_:=0;D_:=0;segment:=0;DTurning_clock:=0;i_IObject_collisionDetected:=IO_OFF;o_IMove_moveForward:=IO_OFF;o_IMove_moveForward_linear_0:=IO_OFF;o_IMove_moveForward_linear_1:=IO_OFF;o_IMove_moveForward_linear_2:=IO_OFF;o_IMove_moveForward_linear_3:=IO_OFF;o_IMove_moveForward_linear_4:=IO_OFF;o_IMove_moveForward_linear_5:=IO_OFF;o_IMove_moveForward_linear_6:=IO_OFF;o_IMove_turn:=IO_OFF;o_IMove_turn_angular_0:=IO_OFF;o_IMove_turn_angular_1:=IO_OFF;o_IMove_turn_angular_2:=IO_OFF;o_IMove_turn_angular_3:=IO_OFF;o_IMove_turn_angular_4:=IO_OFF;o_IMove_turn_angular_5:=IO_OFF;o_IMove_turn_angular_6:=IO_OFF;o_IMove_avoid:=IO_OFF;o_IMove_enableCollisionDetection:=IO_OFF;o_IMove_disableCollisionDetection:=IO_OFF;o_IObject_stop:=IO_OFF)
END
&
THEORY ListParametersX IS
  List_Parameters(Implementation(logic_i))==(?)
END
&
THEORY ListInstanciatedParametersX IS
  List_Instanciated_Parameters(Implementation(logic_i),Machine(g_types))==(?);
  List_Instanciated_Parameters(Implementation(logic_i),Machine(g_operators))==(?);
  List_Instanciated_Parameters(Implementation(logic_i),Machine(io_constants))==(?);
  List_Instanciated_Parameters(Implementation(logic_i),Machine(lchip_interface))==(?);
  List_Instanciated_Parameters(Implementation(logic_i),Machine(user_ctx))==(?);
  List_Instanciated_Parameters(Implementation(logic_i),Machine(inputs))==(?)
END
&
THEORY ListConstraintsX IS
  List_Constraints(Implementation(logic_i))==(btrue);
  List_Context_Constraints(Implementation(logic_i))==(btrue)
END
&
THEORY ListOperationsX IS
  Internal_List_Operations(Implementation(logic_i))==(user_logic,read_master_clock,execute_model_cycle,since,land,lor,lnot,write_output,reset_cycle_timers,reset_outputs,read_model_inputs,write_model_outputs,state_machine,branching_condition_1,nat_7_bits_to_bin_7_bits,moveForward,turn,avoid,enableCollisionDetection,disableCollisionDetection,stop,get_board_0_O1,get_board_0_O2,get_board_0_O3,get_board_0_O4,get_board_0_O5,get_board_0_O6,get_board_0_O7,get_board_0_O8);
  List_Operations(Implementation(logic_i))==(user_logic,read_master_clock,execute_model_cycle,since,land,lor,lnot,write_output,reset_cycle_timers,reset_outputs,read_model_inputs,write_model_outputs,state_machine,branching_condition_1,nat_7_bits_to_bin_7_bits,moveForward,turn,avoid,enableCollisionDetection,disableCollisionDetection,stop,get_board_0_O1,get_board_0_O2,get_board_0_O3,get_board_0_O4,get_board_0_O5,get_board_0_O6,get_board_0_O7,get_board_0_O8)
END
&
THEORY ListInputX IS
  List_Input(Implementation(logic_i),user_logic)==(?);
  List_Input(Implementation(logic_i),read_master_clock)==(?);
  List_Input(Implementation(logic_i),execute_model_cycle)==(?);
  List_Input(Implementation(logic_i),since)==(timer);
  List_Input(Implementation(logic_i),land)==(pp,qq);
  List_Input(Implementation(logic_i),lor)==(pp,qq);
  List_Input(Implementation(logic_i),lnot)==(pp);
  List_Input(Implementation(logic_i),write_output)==(nn);
  List_Input(Implementation(logic_i),reset_cycle_timers)==(?);
  List_Input(Implementation(logic_i),reset_outputs)==(?);
  List_Input(Implementation(logic_i),read_model_inputs)==(?);
  List_Input(Implementation(logic_i),write_model_outputs)==(?);
  List_Input(Implementation(logic_i),state_machine)==(?);
  List_Input(Implementation(logic_i),branching_condition_1)==(?);
  List_Input(Implementation(logic_i),nat_7_bits_to_bin_7_bits)==(nn);
  List_Input(Implementation(logic_i),moveForward)==(l_linear);
  List_Input(Implementation(logic_i),turn)==(l_angular);
  List_Input(Implementation(logic_i),avoid)==(?);
  List_Input(Implementation(logic_i),enableCollisionDetection)==(?);
  List_Input(Implementation(logic_i),disableCollisionDetection)==(?);
  List_Input(Implementation(logic_i),stop)==(?);
  List_Input(Implementation(logic_i),get_board_0_O1)==(?);
  List_Input(Implementation(logic_i),get_board_0_O2)==(?);
  List_Input(Implementation(logic_i),get_board_0_O3)==(?);
  List_Input(Implementation(logic_i),get_board_0_O4)==(?);
  List_Input(Implementation(logic_i),get_board_0_O5)==(?);
  List_Input(Implementation(logic_i),get_board_0_O6)==(?);
  List_Input(Implementation(logic_i),get_board_0_O7)==(?);
  List_Input(Implementation(logic_i),get_board_0_O8)==(?)
END
&
THEORY ListOutputX IS
  List_Output(Implementation(logic_i),user_logic)==(?);
  List_Output(Implementation(logic_i),read_master_clock)==(?);
  List_Output(Implementation(logic_i),execute_model_cycle)==(?);
  List_Output(Implementation(logic_i),since)==(elapsed);
  List_Output(Implementation(logic_i),land)==(result);
  List_Output(Implementation(logic_i),lor)==(result);
  List_Output(Implementation(logic_i),lnot)==(result);
  List_Output(Implementation(logic_i),write_output)==(?);
  List_Output(Implementation(logic_i),reset_cycle_timers)==(?);
  List_Output(Implementation(logic_i),reset_outputs)==(?);
  List_Output(Implementation(logic_i),read_model_inputs)==(?);
  List_Output(Implementation(logic_i),write_model_outputs)==(?);
  List_Output(Implementation(logic_i),state_machine)==(?);
  List_Output(Implementation(logic_i),branching_condition_1)==(?);
  List_Output(Implementation(logic_i),nat_7_bits_to_bin_7_bits)==(o6,o5,o4,o3,o2,o1,o0);
  List_Output(Implementation(logic_i),moveForward)==(?);
  List_Output(Implementation(logic_i),turn)==(?);
  List_Output(Implementation(logic_i),avoid)==(?);
  List_Output(Implementation(logic_i),enableCollisionDetection)==(?);
  List_Output(Implementation(logic_i),disableCollisionDetection)==(?);
  List_Output(Implementation(logic_i),stop)==(?);
  List_Output(Implementation(logic_i),get_board_0_O1)==(po);
  List_Output(Implementation(logic_i),get_board_0_O2)==(po);
  List_Output(Implementation(logic_i),get_board_0_O3)==(po);
  List_Output(Implementation(logic_i),get_board_0_O4)==(po);
  List_Output(Implementation(logic_i),get_board_0_O5)==(po);
  List_Output(Implementation(logic_i),get_board_0_O6)==(po);
  List_Output(Implementation(logic_i),get_board_0_O7)==(po);
  List_Output(Implementation(logic_i),get_board_0_O8)==(po)
END
&
THEORY ListHeaderX IS
  List_Header(Implementation(logic_i),user_logic)==(user_logic);
  List_Header(Implementation(logic_i),read_master_clock)==(read_master_clock);
  List_Header(Implementation(logic_i),execute_model_cycle)==(execute_model_cycle);
  List_Header(Implementation(logic_i),since)==(elapsed <-- since(timer));
  List_Header(Implementation(logic_i),land)==(result <-- land(pp,qq));
  List_Header(Implementation(logic_i),lor)==(result <-- lor(pp,qq));
  List_Header(Implementation(logic_i),lnot)==(result <-- lnot(pp));
  List_Header(Implementation(logic_i),write_output)==(write_output(nn));
  List_Header(Implementation(logic_i),reset_cycle_timers)==(reset_cycle_timers);
  List_Header(Implementation(logic_i),reset_outputs)==(reset_outputs);
  List_Header(Implementation(logic_i),read_model_inputs)==(read_model_inputs);
  List_Header(Implementation(logic_i),write_model_outputs)==(write_model_outputs);
  List_Header(Implementation(logic_i),state_machine)==(state_machine);
  List_Header(Implementation(logic_i),branching_condition_1)==(branching_condition_1);
  List_Header(Implementation(logic_i),nat_7_bits_to_bin_7_bits)==(o6,o5,o4,o3,o2,o1,o0 <-- nat_7_bits_to_bin_7_bits(nn));
  List_Header(Implementation(logic_i),moveForward)==(moveForward(l_linear));
  List_Header(Implementation(logic_i),turn)==(turn(l_angular));
  List_Header(Implementation(logic_i),avoid)==(avoid);
  List_Header(Implementation(logic_i),enableCollisionDetection)==(enableCollisionDetection);
  List_Header(Implementation(logic_i),disableCollisionDetection)==(disableCollisionDetection);
  List_Header(Implementation(logic_i),stop)==(stop);
  List_Header(Implementation(logic_i),get_board_0_O1)==(po <-- get_board_0_O1);
  List_Header(Implementation(logic_i),get_board_0_O2)==(po <-- get_board_0_O2);
  List_Header(Implementation(logic_i),get_board_0_O3)==(po <-- get_board_0_O3);
  List_Header(Implementation(logic_i),get_board_0_O4)==(po <-- get_board_0_O4);
  List_Header(Implementation(logic_i),get_board_0_O5)==(po <-- get_board_0_O5);
  List_Header(Implementation(logic_i),get_board_0_O6)==(po <-- get_board_0_O6);
  List_Header(Implementation(logic_i),get_board_0_O7)==(po <-- get_board_0_O7);
  List_Header(Implementation(logic_i),get_board_0_O8)==(po <-- get_board_0_O8)
END
&
THEORY ListPreconditionX IS
  Own_Precondition(Implementation(logic_i),user_logic)==(btrue);
  List_Precondition(Implementation(logic_i),user_logic)==(btrue);
  Own_Precondition(Implementation(logic_i),read_master_clock)==(btrue);
  List_Precondition(Implementation(logic_i),read_master_clock)==(btrue);
  Own_Precondition(Implementation(logic_i),execute_model_cycle)==(btrue);
  List_Precondition(Implementation(logic_i),execute_model_cycle)==(btrue);
  Own_Precondition(Implementation(logic_i),since)==(btrue);
  List_Precondition(Implementation(logic_i),since)==(timer: uint32_t & elapsed: uint32_t);
  Own_Precondition(Implementation(logic_i),land)==(btrue);
  List_Precondition(Implementation(logic_i),land)==(pp: BOOL & qq: BOOL & result: BOOL);
  Own_Precondition(Implementation(logic_i),lor)==(btrue);
  List_Precondition(Implementation(logic_i),lor)==(pp: BOOL & qq: BOOL & result: BOOL);
  Own_Precondition(Implementation(logic_i),lnot)==(btrue);
  List_Precondition(Implementation(logic_i),lnot)==(pp: BOOL & result: BOOL);
  Own_Precondition(Implementation(logic_i),write_output)==(btrue);
  List_Precondition(Implementation(logic_i),write_output)==(nn: uint32_t & nn: 0..max_board_output);
  Own_Precondition(Implementation(logic_i),reset_cycle_timers)==(btrue);
  List_Precondition(Implementation(logic_i),reset_cycle_timers)==(btrue);
  Own_Precondition(Implementation(logic_i),reset_outputs)==(btrue);
  List_Precondition(Implementation(logic_i),reset_outputs)==(btrue);
  Own_Precondition(Implementation(logic_i),read_model_inputs)==(btrue);
  List_Precondition(Implementation(logic_i),read_model_inputs)==(btrue);
  Own_Precondition(Implementation(logic_i),write_model_outputs)==(btrue);
  List_Precondition(Implementation(logic_i),write_model_outputs)==(btrue);
  Own_Precondition(Implementation(logic_i),state_machine)==(btrue);
  List_Precondition(Implementation(logic_i),state_machine)==(btrue);
  Own_Precondition(Implementation(logic_i),branching_condition_1)==(btrue);
  List_Precondition(Implementation(logic_i),branching_condition_1)==(btrue);
  Own_Precondition(Implementation(logic_i),nat_7_bits_to_bin_7_bits)==(btrue);
  List_Precondition(Implementation(logic_i),nat_7_bits_to_bin_7_bits)==(nn: uint32_t & nn: 0..max_board_output & o6: uint8_t & o5: uint8_t & o4: uint8_t & o3: uint8_t & o2: uint8_t & o1: uint8_t & o0: uint8_t);
  Own_Precondition(Implementation(logic_i),moveForward)==(btrue);
  List_Precondition(Implementation(logic_i),moveForward)==(l_linear: uint32_t & l_linear: 0..max_board_output);
  Own_Precondition(Implementation(logic_i),turn)==(btrue);
  List_Precondition(Implementation(logic_i),turn)==(l_angular: uint32_t & l_angular: 0..max_board_output);
  Own_Precondition(Implementation(logic_i),avoid)==(btrue);
  List_Precondition(Implementation(logic_i),avoid)==(btrue);
  Own_Precondition(Implementation(logic_i),enableCollisionDetection)==(btrue);
  List_Precondition(Implementation(logic_i),enableCollisionDetection)==(btrue);
  Own_Precondition(Implementation(logic_i),disableCollisionDetection)==(btrue);
  List_Precondition(Implementation(logic_i),disableCollisionDetection)==(btrue);
  Own_Precondition(Implementation(logic_i),stop)==(btrue);
  List_Precondition(Implementation(logic_i),stop)==(btrue);
  Own_Precondition(Implementation(logic_i),get_board_0_O1)==(btrue);
  List_Precondition(Implementation(logic_i),get_board_0_O1)==(po: uint8_t);
  Own_Precondition(Implementation(logic_i),get_board_0_O2)==(btrue);
  List_Precondition(Implementation(logic_i),get_board_0_O2)==(po: uint8_t);
  Own_Precondition(Implementation(logic_i),get_board_0_O3)==(btrue);
  List_Precondition(Implementation(logic_i),get_board_0_O3)==(po: uint8_t);
  Own_Precondition(Implementation(logic_i),get_board_0_O4)==(btrue);
  List_Precondition(Implementation(logic_i),get_board_0_O4)==(po: uint8_t);
  Own_Precondition(Implementation(logic_i),get_board_0_O5)==(btrue);
  List_Precondition(Implementation(logic_i),get_board_0_O5)==(po: uint8_t);
  Own_Precondition(Implementation(logic_i),get_board_0_O6)==(btrue);
  List_Precondition(Implementation(logic_i),get_board_0_O6)==(po: uint8_t);
  Own_Precondition(Implementation(logic_i),get_board_0_O7)==(btrue);
  List_Precondition(Implementation(logic_i),get_board_0_O7)==(po: uint8_t);
  Own_Precondition(Implementation(logic_i),get_board_0_O8)==(btrue);
  List_Precondition(Implementation(logic_i),get_board_0_O8)==(po: uint8_t)
END
&
THEORY ListSubstitutionX IS
  Expanded_List_Substitution(Implementation(logic_i),get_board_0_O8)==(po: uint8_t & board_0_O8: INT | po:=board_0_O8);
  Expanded_List_Substitution(Implementation(logic_i),get_board_0_O7)==(po: uint8_t & board_0_O7: INT | po:=board_0_O7);
  Expanded_List_Substitution(Implementation(logic_i),get_board_0_O6)==(po: uint8_t & board_0_O6: INT | po:=board_0_O6);
  Expanded_List_Substitution(Implementation(logic_i),get_board_0_O5)==(po: uint8_t & board_0_O5: INT | po:=board_0_O5);
  Expanded_List_Substitution(Implementation(logic_i),get_board_0_O4)==(po: uint8_t & board_0_O4: INT | po:=board_0_O4);
  Expanded_List_Substitution(Implementation(logic_i),get_board_0_O3)==(po: uint8_t & board_0_O3: INT | po:=board_0_O3);
  Expanded_List_Substitution(Implementation(logic_i),get_board_0_O2)==(po: uint8_t & board_0_O2: INT | po:=board_0_O2);
  Expanded_List_Substitution(Implementation(logic_i),get_board_0_O1)==(po: uint8_t & board_0_O1: INT | po:=board_0_O1);
  Expanded_List_Substitution(Implementation(logic_i),stop)==(btrue & IO_ON: INT | o_IObject_stop:=IO_ON);
  Expanded_List_Substitution(Implementation(logic_i),disableCollisionDetection)==(btrue & IO_ON: INT | o_IMove_disableCollisionDetection:=IO_ON);
  Expanded_List_Substitution(Implementation(logic_i),enableCollisionDetection)==(btrue & IO_ON: INT | o_IMove_enableCollisionDetection:=IO_ON);
  Expanded_List_Substitution(Implementation(logic_i),avoid)==(btrue & IO_ON: INT | o_IMove_avoid:=IO_ON);
  Expanded_List_Substitution(Implementation(logic_i),turn)==(l_angular: uint32_t & l_angular: 0..max_board_output | (IO_ON: INT | o_IMove_turn:=IO_ON);(l_angular: uint32_t & l_angular: 0..max_board_output & o_IMove_turn_angular_6: uint8_t & o_IMove_turn_angular_5: uint8_t & o_IMove_turn_angular_4: uint8_t & o_IMove_turn_angular_3: uint8_t & o_IMove_turn_angular_2: uint8_t & o_IMove_turn_angular_1: uint8_t & o_IMove_turn_angular_0: uint8_t | @(o6$0).(o6$0: uint8_t ==> o_IMove_turn_angular_6:=o6$0) || @(o5$0).(o5$0: uint8_t ==> o_IMove_turn_angular_5:=o5$0) || @(o4$0).(o4$0: uint8_t ==> o_IMove_turn_angular_4:=o4$0) || @(o3$0).(o3$0: uint8_t ==> o_IMove_turn_angular_3:=o3$0) || @(o2$0).(o2$0: uint8_t ==> o_IMove_turn_angular_2:=o2$0) || @(o1$0).(o1$0: uint8_t ==> o_IMove_turn_angular_1:=o1$0) || @(o0$0).(o0$0: uint8_t ==> o_IMove_turn_angular_0:=o0$0)));
  Expanded_List_Substitution(Implementation(logic_i),moveForward)==(l_linear: uint32_t & l_linear: 0..max_board_output | (IO_ON: INT | o_IMove_moveForward:=IO_ON);(l_linear: uint32_t & l_linear: 0..max_board_output & o_IMove_moveForward_linear_6: uint8_t & o_IMove_moveForward_linear_5: uint8_t & o_IMove_moveForward_linear_4: uint8_t & o_IMove_moveForward_linear_3: uint8_t & o_IMove_moveForward_linear_2: uint8_t & o_IMove_moveForward_linear_1: uint8_t & o_IMove_moveForward_linear_0: uint8_t | @(o6$0).(o6$0: uint8_t ==> o_IMove_moveForward_linear_6:=o6$0) || @(o5$0).(o5$0: uint8_t ==> o_IMove_moveForward_linear_5:=o5$0) || @(o4$0).(o4$0: uint8_t ==> o_IMove_moveForward_linear_4:=o4$0) || @(o3$0).(o3$0: uint8_t ==> o_IMove_moveForward_linear_3:=o3$0) || @(o2$0).(o2$0: uint8_t ==> o_IMove_moveForward_linear_2:=o2$0) || @(o1$0).(o1$0: uint8_t ==> o_IMove_moveForward_linear_1:=o1$0) || @(o0$0).(o0$0: uint8_t ==> o_IMove_moveForward_linear_0:=o0$0)));
  Expanded_List_Substitution(Implementation(logic_i),nat_7_bits_to_bin_7_bits)==(nn: uint32_t & nn: 0..max_board_output & o6: uint8_t & o5: uint8_t & o4: uint8_t & o3: uint8_t & o2: uint8_t & o1: uint8_t & o0: uint8_t | @(o6$1).(o6$1: uint8_t ==> o6:=o6$1);@(o5$1).(o5$1: uint8_t ==> o5:=o5$1);@(o4$1).(o4$1: uint8_t ==> o4:=o4$1);@(o3$1).(o3$1: uint8_t ==> o3:=o3$1);@(o2$1).(o2$1: uint8_t ==> o2:=o2$1);@(o1$1).(o1$1: uint8_t ==> o1:=o1$1);@(o0$1).(o0$1: uint8_t ==> o0:=o0$1);@o_aux.(@(o_aux$2).(o_aux$2: uint32_t ==> o_aux:=o_aux$2);(nn mod 2: INT & nn mod 2: NAT & nn: NAT & 2: NAT1 | o_aux:=nn mod 2);(o_aux = 0 ==> (IO_OFF: INT | o0:=IO_OFF) [] not(o_aux = 0) ==> (IO_ON: INT | o0:=IO_ON));(nn/2: INT & nn: INT & 2: INT & not(2 = 0) | o_aux:=nn/2);(o_aux mod 2: INT & o_aux mod 2: NAT & o_aux: NAT & 2: NAT1 | o_aux:=o_aux mod 2);(o_aux = 0 ==> (IO_OFF: INT | o1:=IO_OFF) [] not(o_aux = 0) ==> (IO_ON: INT | o1:=IO_ON));(nn/4: INT & nn: INT & 4: INT & not(4 = 0) | o_aux:=nn/4);(o_aux mod 2: INT & o_aux mod 2: NAT & o_aux: NAT & 2: NAT1 | o_aux:=o_aux mod 2);(o_aux = 0 ==> (IO_OFF: INT | o2:=IO_OFF) [] not(o_aux = 0) ==> (IO_ON: INT | o2:=IO_ON));(nn/8: INT & nn: INT & 8: INT & not(8 = 0) | o_aux:=nn/8);(o_aux mod 2: INT & o_aux mod 2: NAT & o_aux: NAT & 2: NAT1 | o_aux:=o_aux mod 2);(o_aux = 0 ==> (IO_OFF: INT | o3:=IO_OFF) [] not(o_aux = 0) ==> (IO_ON: INT | o3:=IO_ON));(nn/16: INT & nn: INT & 16: INT & not(16 = 0) | o_aux:=nn/16);(o_aux mod 2: INT & o_aux mod 2: NAT & o_aux: NAT & 2: NAT1 | o_aux:=o_aux mod 2);(o_aux = 0 ==> (IO_OFF: INT | o4:=IO_OFF) [] not(o_aux = 0) ==> (IO_ON: INT | o4:=IO_ON));(nn/32: INT & nn: INT & 32: INT & not(32 = 0) | o_aux:=nn/32);(o_aux mod 2: INT & o_aux mod 2: NAT & o_aux: NAT & 2: NAT1 | o_aux:=o_aux mod 2);(o_aux = 0 ==> (IO_OFF: INT | o5:=IO_OFF) [] not(o_aux = 0) ==> (IO_ON: INT | o5:=IO_ON));(nn/64: INT & nn: INT & 64: INT & not(64 = 0) | o_aux:=nn/64);(o_aux mod 2: INT & o_aux mod 2: NAT & o_aux: NAT & 2: NAT1 | o_aux:=o_aux mod 2);(o_aux = 0 ==> (IO_OFF: INT | o6:=IO_OFF) [] not(o_aux = 0) ==> (IO_ON: INT | o6:=IO_ON))));
  Expanded_List_Substitution(Implementation(logic_i),branching_condition_1)==(btrue | @since_C_.(@(since_C_$2).(since_C_$2: uint32_t ==> since_C_:=since_C_$2);(C_: uint32_t & since_C_: uint32_t | @(elapsed$0).(elapsed$0: uint32_t ==> since_C_:=elapsed$0));@(boolean_literal_1,boolean_literal_2,condition_1,condition_2,condition_3,condition_4,condition_4_1,condition_4_1_1,condition_4_2,condition_4_2_1,condition_4_3,condition_4_3_1).(@(boolean_literal_1$2).(boolean_literal_1$2: BOOL ==> boolean_literal_1:=boolean_literal_1$2);@(boolean_literal_2$2).(boolean_literal_2$2: BOOL ==> boolean_literal_2:=boolean_literal_2$2);@(condition_1$2).(condition_1$2: BOOL ==> condition_1:=condition_1$2);@(condition_2$2).(condition_2$2: BOOL ==> condition_2:=condition_2$2);@(condition_3$2).(condition_3$2: BOOL ==> condition_3:=condition_3$2);@(condition_4$2).(condition_4$2: BOOL ==> condition_4:=condition_4$2);@(condition_4_1$2).(condition_4_1$2: BOOL ==> condition_4_1:=condition_4_1$2);@(condition_4_1_1$2).(condition_4_1_1$2: BOOL ==> condition_4_1_1:=condition_4_1_1$2);@(condition_4_2$2).(condition_4_2$2: BOOL ==> condition_4_2:=condition_4_2$2);@(condition_4_2_1$2).(condition_4_2_1$2: BOOL ==> condition_4_2_1:=condition_4_2_1$2);@(condition_4_3$2).(condition_4_3$2: BOOL ==> condition_4_3:=condition_4_3$2);@(condition_4_3_1$2).(condition_4_3_1$2: BOOL ==> condition_4_3_1:=condition_4_3_1$2);boolean_literal_1:=bool(since_C_ = 5);boolean_literal_2:=bool(segment<4);(boolean_literal_1: BOOL & boolean_literal_2: BOOL & condition_1: BOOL | @(result$0).(result$0: BOOL ==> condition_1:=result$0));boolean_literal_1:=bool(since_C_ = 5);boolean_literal_2:=bool(segment = 4);(boolean_literal_1: BOOL & boolean_literal_2: BOOL & condition_2: BOOL | @(result$0).(result$0: BOOL ==> condition_2:=result$0));boolean_literal_1:=bool(i_IObject_collisionDetected = IO_ON);boolean_literal_2:=bool(segment<3);(boolean_literal_1: BOOL & boolean_literal_2: BOOL & condition_3: BOOL | @(result$0).(result$0: BOOL ==> condition_3:=result$0));boolean_literal_1:=bool(since_C_ = 5);boolean_literal_2:=bool(segment<4);(boolean_literal_1: BOOL & boolean_literal_2: BOOL & condition_4_1: BOOL | @(result$0).(result$0: BOOL ==> condition_4_1:=result$0));(condition_4_1: BOOL & condition_4_1: BOOL | @(result$0).(result$0: BOOL ==> condition_4_1:=result$0));boolean_literal_1:=bool(since_C_ = 5);boolean_literal_2:=bool(segment = 4);(boolean_literal_1: BOOL & boolean_literal_2: BOOL & condition_4_2: BOOL | @(result$0).(result$0: BOOL ==> condition_4_2:=result$0));(condition_4_2: BOOL & condition_4_2: BOOL | @(result$0).(result$0: BOOL ==> condition_4_2:=result$0));boolean_literal_1:=bool(i_IObject_collisionDetected = IO_ON);boolean_literal_2:=bool(segment<3);(boolean_literal_1: BOOL & boolean_literal_2: BOOL & condition_4_3: BOOL | @(result$0).(result$0: BOOL ==> condition_4_3:=result$0));(condition_4_3: BOOL & condition_4_3: BOOL | @(result$0).(result$0: BOOL ==> condition_4_3:=result$0));(condition_4_1: BOOL & condition_4_2: BOOL & condition_4: BOOL | @(result$0).(result$0: BOOL ==> condition_4:=result$0));(condition_4: BOOL & condition_4_3: BOOL & condition_4: BOOL | @(result$0).(result$0: BOOL ==> condition_4:=result$0));(condition_1 = TRUE ==> ((btrue | @(o_IMove_disableCollisionDetection$0).(o_IMove_disableCollisionDetection$0: uint8_t ==> o_IMove_disableCollisionDetection:=o_IMove_disableCollisionDetection$0));(add_uint32(segment,1): INT & segment,1: dom(add_uint32) | segment:=add_uint32(segment,1));(btrue | @(o_IObject_stop$0).(o_IObject_stop$0: uint8_t ==> o_IObject_stop:=o_IObject_stop$0));(angular: uint32_t & angular: 0..max_board_output | @(o_IMove_turn$0).(o_IMove_turn$0: uint8_t ==> o_IMove_turn:=o_IMove_turn$0) || @(o_IMove_turn_angular_0$0).(o_IMove_turn_angular_0$0: uint8_t ==> o_IMove_turn_angular_0:=o_IMove_turn_angular_0$0) || @(o_IMove_turn_angular_1$0).(o_IMove_turn_angular_1$0: uint8_t ==> o_IMove_turn_angular_1:=o_IMove_turn_angular_1$0) || @(o_IMove_turn_angular_2$0).(o_IMove_turn_angular_2$0: uint8_t ==> o_IMove_turn_angular_2:=o_IMove_turn_angular_2$0) || @(o_IMove_turn_angular_3$0).(o_IMove_turn_angular_3$0: uint8_t ==> o_IMove_turn_angular_3:=o_IMove_turn_angular_3$0) || @(o_IMove_turn_angular_4$0).(o_IMove_turn_angular_4$0: uint8_t ==> o_IMove_turn_angular_4:=o_IMove_turn_angular_4$0) || @(o_IMove_turn_angular_5$0).(o_IMove_turn_angular_5$0: uint8_t ==> o_IMove_turn_angular_5:=o_IMove_turn_angular_5$0) || @(o_IMove_turn_angular_6$0).(o_IMove_turn_angular_6$0: uint8_t ==> o_IMove_turn_angular_6:=o_IMove_turn_angular_6$0));(current_time: INT | DTurning_clock:=current_time);@since_DTurning_clock.(@(since_DTurning_clock$2).(since_DTurning_clock$2: uint32_t ==> since_DTurning_clock:=since_DTurning_clock$2);(DTurning_clock: uint32_t & since_DTurning_clock: uint32_t | @(elapsed$0).(elapsed$0: uint32_t ==> since_DTurning_clock:=elapsed$0));(since_DTurning_clock<2 ==> smstate:=EXEC_1 [] not(since_DTurning_clock<2) ==> skip))) [] not(condition_1 = TRUE) ==> (condition_2 = TRUE ==> ((btrue | @(o_IObject_stop$0).(o_IObject_stop$0: uint8_t ==> o_IObject_stop:=o_IObject_stop$0));smstate:=FINAL) [] not(condition_2 = TRUE) ==> (condition_3 = TRUE ==> ((btrue | @(o_IMove_disableCollisionDetection$0).(o_IMove_disableCollisionDetection$0: uint8_t ==> o_IMove_disableCollisionDetection:=o_IMove_disableCollisionDetection$0));(btrue | @(o_IMove_avoid$0).(o_IMove_avoid$0: uint8_t ==> o_IMove_avoid:=o_IMove_avoid$0));(current_time: INT | D_:=current_time);@since_D_.(@(since_D_$2).(since_D_$2: uint32_t ==> since_D_:=since_D_$2);(D_: uint32_t & since_D_: uint32_t | @(elapsed$0).(elapsed$0: uint32_t ==> since_D_:=elapsed$0));(since_D_<2 ==> smstate:=EXEC_3 [] not(since_D_<2) ==> skip))) [] not(condition_3 = TRUE) ==> (condition_4 = TRUE ==> smstate:=EXEC_2 [] not(condition_4 = TRUE) ==> skip)))))));
  Expanded_List_Substitution(Implementation(logic_i),state_machine)==(btrue | smstate = INIT ==> ((current_time: INT | C_:=current_time);(0: INT | segment:=0);(linear: uint32_t & linear: 0..max_board_output | @(o_IMove_moveForward$0).(o_IMove_moveForward$0: uint8_t ==> o_IMove_moveForward:=o_IMove_moveForward$0) || @(o_IMove_moveForward_linear_0$0).(o_IMove_moveForward_linear_0$0: uint8_t ==> o_IMove_moveForward_linear_0:=o_IMove_moveForward_linear_0$0) || @(o_IMove_moveForward_linear_1$0).(o_IMove_moveForward_linear_1$0: uint8_t ==> o_IMove_moveForward_linear_1:=o_IMove_moveForward_linear_1$0) || @(o_IMove_moveForward_linear_2$0).(o_IMove_moveForward_linear_2$0: uint8_t ==> o_IMove_moveForward_linear_2:=o_IMove_moveForward_linear_2$0) || @(o_IMove_moveForward_linear_3$0).(o_IMove_moveForward_linear_3$0: uint8_t ==> o_IMove_moveForward_linear_3:=o_IMove_moveForward_linear_3$0) || @(o_IMove_moveForward_linear_4$0).(o_IMove_moveForward_linear_4$0: uint8_t ==> o_IMove_moveForward_linear_4:=o_IMove_moveForward_linear_4$0) || @(o_IMove_moveForward_linear_5$0).(o_IMove_moveForward_linear_5$0: uint8_t ==> o_IMove_moveForward_linear_5:=o_IMove_moveForward_linear_5$0) || @(o_IMove_moveForward_linear_6$0).(o_IMove_moveForward_linear_6$0: uint8_t ==> o_IMove_moveForward_linear_6:=o_IMove_moveForward_linear_6$0));(btrue | @(o_IMove_enableCollisionDetection$0).(o_IMove_enableCollisionDetection$0: uint8_t ==> o_IMove_enableCollisionDetection:=o_IMove_enableCollisionDetection$0));(btrue | @(my_clock$0).(my_clock$0: uint8_t ==> my_clock:=my_clock$0) || @(smstate$0).(smstate$0: STATE ==> smstate:=smstate$0) || @(first_time$0).(first_time$0: BOOL ==> first_time:=first_time$0) || @(SimSquare_cycle_timer$0).(SimSquare_cycle_timer$0: uint32_t ==> SimSquare_cycle_timer:=SimSquare_cycle_timer$0) || @(C_$0).(C_$0: uint32_t ==> C_:=C_$0) || @(D_$0).(D_$0: uint32_t ==> D_:=D_$0) || @(segment$0).(segment$0: uint32_t ==> segment:=segment$0) || @(DTurning_clock$0).(DTurning_clock$0: uint32_t ==> DTurning_clock:=DTurning_clock$0) || @(o_IMove_moveForward$0).(o_IMove_moveForward$0: uint8_t ==> o_IMove_moveForward:=o_IMove_moveForward$0) || @(o_IMove_moveForward_linear_0$0).(o_IMove_moveForward_linear_0$0: uint8_t ==> o_IMove_moveForward_linear_0:=o_IMove_moveForward_linear_0$0) || @(o_IMove_moveForward_linear_1$0).(o_IMove_moveForward_linear_1$0: uint8_t ==> o_IMove_moveForward_linear_1:=o_IMove_moveForward_linear_1$0) || @(o_IMove_moveForward_linear_2$0).(o_IMove_moveForward_linear_2$0: uint8_t ==> o_IMove_moveForward_linear_2:=o_IMove_moveForward_linear_2$0) || @(o_IMove_moveForward_linear_3$0).(o_IMove_moveForward_linear_3$0: uint8_t ==> o_IMove_moveForward_linear_3:=o_IMove_moveForward_linear_3$0) || @(o_IMove_moveForward_linear_4$0).(o_IMove_moveForward_linear_4$0: uint8_t ==> o_IMove_moveForward_linear_4:=o_IMove_moveForward_linear_4$0) || @(o_IMove_moveForward_linear_5$0).(o_IMove_moveForward_linear_5$0: uint8_t ==> o_IMove_moveForward_linear_5:=o_IMove_moveForward_linear_5$0) || @(o_IMove_moveForward_linear_6$0).(o_IMove_moveForward_linear_6$0: uint8_t ==> o_IMove_moveForward_linear_6:=o_IMove_moveForward_linear_6$0) || @(o_IMove_turn$0).(o_IMove_turn$0: uint8_t ==> o_IMove_turn:=o_IMove_turn$0) || @(o_IMove_turn_angular_0$0).(o_IMove_turn_angular_0$0: uint8_t ==> o_IMove_turn_angular_0:=o_IMove_turn_angular_0$0) || @(o_IMove_turn_angular_1$0).(o_IMove_turn_angular_1$0: uint8_t ==> o_IMove_turn_angular_1:=o_IMove_turn_angular_1$0) || @(o_IMove_turn_angular_2$0).(o_IMove_turn_angular_2$0: uint8_t ==> o_IMove_turn_angular_2:=o_IMove_turn_angular_2$0) || @(o_IMove_turn_angular_3$0).(o_IMove_turn_angular_3$0: uint8_t ==> o_IMove_turn_angular_3:=o_IMove_turn_angular_3$0) || @(o_IMove_turn_angular_4$0).(o_IMove_turn_angular_4$0: uint8_t ==> o_IMove_turn_angular_4:=o_IMove_turn_angular_4$0) || @(o_IMove_turn_angular_5$0).(o_IMove_turn_angular_5$0: uint8_t ==> o_IMove_turn_angular_5:=o_IMove_turn_angular_5$0) || @(o_IMove_turn_angular_6$0).(o_IMove_turn_angular_6$0: uint8_t ==> o_IMove_turn_angular_6:=o_IMove_turn_angular_6$0) || @(o_IMove_avoid$0).(o_IMove_avoid$0: uint8_t ==> o_IMove_avoid:=o_IMove_avoid$0) || @(o_IMove_enableCollisionDetection$0).(o_IMove_enableCollisionDetection$0: uint8_t ==> o_IMove_enableCollisionDetection:=o_IMove_enableCollisionDetection$0) || @(o_IMove_disableCollisionDetection$0).(o_IMove_disableCollisionDetection$0: uint8_t ==> o_IMove_disableCollisionDetection:=o_IMove_disableCollisionDetection$0) || @(o_IObject_stop$0).(o_IObject_stop$0: uint8_t ==> o_IObject_stop:=o_IObject_stop$0))) [] not(smstate = INIT) ==> (smstate = EXEC_1 ==> @since_DTurning_clock.(@(since_DTurning_clock$2).(since_DTurning_clock$2: uint32_t ==> since_DTurning_clock:=since_DTurning_clock$2);(DTurning_clock: uint32_t & since_DTurning_clock: uint32_t | @(elapsed$0).(elapsed$0: uint32_t ==> since_DTurning_clock:=elapsed$0));(since_DTurning_clock<2 ==> smstate:=EXEC_1 [] not(since_DTurning_clock<2) ==> (since_DTurning_clock = 2 ==> ((current_time: INT | C_:=current_time);(linear: uint32_t & linear: 0..max_board_output | @(o_IMove_moveForward$0).(o_IMove_moveForward$0: uint8_t ==> o_IMove_moveForward:=o_IMove_moveForward$0) || @(o_IMove_moveForward_linear_0$0).(o_IMove_moveForward_linear_0$0: uint8_t ==> o_IMove_moveForward_linear_0:=o_IMove_moveForward_linear_0$0) || @(o_IMove_moveForward_linear_1$0).(o_IMove_moveForward_linear_1$0: uint8_t ==> o_IMove_moveForward_linear_1:=o_IMove_moveForward_linear_1$0) || @(o_IMove_moveForward_linear_2$0).(o_IMove_moveForward_linear_2$0: uint8_t ==> o_IMove_moveForward_linear_2:=o_IMove_moveForward_linear_2$0) || @(o_IMove_moveForward_linear_3$0).(o_IMove_moveForward_linear_3$0: uint8_t ==> o_IMove_moveForward_linear_3:=o_IMove_moveForward_linear_3$0) || @(o_IMove_moveForward_linear_4$0).(o_IMove_moveForward_linear_4$0: uint8_t ==> o_IMove_moveForward_linear_4:=o_IMove_moveForward_linear_4$0) || @(o_IMove_moveForward_linear_5$0).(o_IMove_moveForward_linear_5$0: uint8_t ==> o_IMove_moveForward_linear_5:=o_IMove_moveForward_linear_5$0) || @(o_IMove_moveForward_linear_6$0).(o_IMove_moveForward_linear_6$0: uint8_t ==> o_IMove_moveForward_linear_6:=o_IMove_moveForward_linear_6$0));(btrue | @(o_IMove_enableCollisionDetection$0).(o_IMove_enableCollisionDetection$0: uint8_t ==> o_IMove_enableCollisionDetection:=o_IMove_enableCollisionDetection$0));(btrue | @(my_clock$0).(my_clock$0: uint8_t ==> my_clock:=my_clock$0) || @(smstate$0).(smstate$0: STATE ==> smstate:=smstate$0) || @(first_time$0).(first_time$0: BOOL ==> first_time:=first_time$0) || @(SimSquare_cycle_timer$0).(SimSquare_cycle_timer$0: uint32_t ==> SimSquare_cycle_timer:=SimSquare_cycle_timer$0) || @(C_$0).(C_$0: uint32_t ==> C_:=C_$0) || @(D_$0).(D_$0: uint32_t ==> D_:=D_$0) || @(segment$0).(segment$0: uint32_t ==> segment:=segment$0) || @(DTurning_clock$0).(DTurning_clock$0: uint32_t ==> DTurning_clock:=DTurning_clock$0) || @(o_IMove_moveForward$0).(o_IMove_moveForward$0: uint8_t ==> o_IMove_moveForward:=o_IMove_moveForward$0) || @(o_IMove_moveForward_linear_0$0).(o_IMove_moveForward_linear_0$0: uint8_t ==> o_IMove_moveForward_linear_0:=o_IMove_moveForward_linear_0$0) || @(o_IMove_moveForward_linear_1$0).(o_IMove_moveForward_linear_1$0: uint8_t ==> o_IMove_moveForward_linear_1:=o_IMove_moveForward_linear_1$0) || @(o_IMove_moveForward_linear_2$0).(o_IMove_moveForward_linear_2$0: uint8_t ==> o_IMove_moveForward_linear_2:=o_IMove_moveForward_linear_2$0) || @(o_IMove_moveForward_linear_3$0).(o_IMove_moveForward_linear_3$0: uint8_t ==> o_IMove_moveForward_linear_3:=o_IMove_moveForward_linear_3$0) || @(o_IMove_moveForward_linear_4$0).(o_IMove_moveForward_linear_4$0: uint8_t ==> o_IMove_moveForward_linear_4:=o_IMove_moveForward_linear_4$0) || @(o_IMove_moveForward_linear_5$0).(o_IMove_moveForward_linear_5$0: uint8_t ==> o_IMove_moveForward_linear_5:=o_IMove_moveForward_linear_5$0) || @(o_IMove_moveForward_linear_6$0).(o_IMove_moveForward_linear_6$0: uint8_t ==> o_IMove_moveForward_linear_6:=o_IMove_moveForward_linear_6$0) || @(o_IMove_turn$0).(o_IMove_turn$0: uint8_t ==> o_IMove_turn:=o_IMove_turn$0) || @(o_IMove_turn_angular_0$0).(o_IMove_turn_angular_0$0: uint8_t ==> o_IMove_turn_angular_0:=o_IMove_turn_angular_0$0) || @(o_IMove_turn_angular_1$0).(o_IMove_turn_angular_1$0: uint8_t ==> o_IMove_turn_angular_1:=o_IMove_turn_angular_1$0) || @(o_IMove_turn_angular_2$0).(o_IMove_turn_angular_2$0: uint8_t ==> o_IMove_turn_angular_2:=o_IMove_turn_angular_2$0) || @(o_IMove_turn_angular_3$0).(o_IMove_turn_angular_3$0: uint8_t ==> o_IMove_turn_angular_3:=o_IMove_turn_angular_3$0) || @(o_IMove_turn_angular_4$0).(o_IMove_turn_angular_4$0: uint8_t ==> o_IMove_turn_angular_4:=o_IMove_turn_angular_4$0) || @(o_IMove_turn_angular_5$0).(o_IMove_turn_angular_5$0: uint8_t ==> o_IMove_turn_angular_5:=o_IMove_turn_angular_5$0) || @(o_IMove_turn_angular_6$0).(o_IMove_turn_angular_6$0: uint8_t ==> o_IMove_turn_angular_6:=o_IMove_turn_angular_6$0) || @(o_IMove_avoid$0).(o_IMove_avoid$0: uint8_t ==> o_IMove_avoid:=o_IMove_avoid$0) || @(o_IMove_enableCollisionDetection$0).(o_IMove_enableCollisionDetection$0: uint8_t ==> o_IMove_enableCollisionDetection:=o_IMove_enableCollisionDetection$0) || @(o_IMove_disableCollisionDetection$0).(o_IMove_disableCollisionDetection$0: uint8_t ==> o_IMove_disableCollisionDetection:=o_IMove_disableCollisionDetection$0) || @(o_IObject_stop$0).(o_IObject_stop$0: uint8_t ==> o_IObject_stop:=o_IObject_stop$0))) [] not(since_DTurning_clock = 2) ==> skip))) [] not(smstate = EXEC_1) ==> (smstate = EXEC_2 ==> (btrue | @(my_clock$0).(my_clock$0: uint8_t ==> my_clock:=my_clock$0) || @(smstate$0).(smstate$0: STATE ==> smstate:=smstate$0) || @(first_time$0).(first_time$0: BOOL ==> first_time:=first_time$0) || @(SimSquare_cycle_timer$0).(SimSquare_cycle_timer$0: uint32_t ==> SimSquare_cycle_timer:=SimSquare_cycle_timer$0) || @(C_$0).(C_$0: uint32_t ==> C_:=C_$0) || @(D_$0).(D_$0: uint32_t ==> D_:=D_$0) || @(segment$0).(segment$0: uint32_t ==> segment:=segment$0) || @(DTurning_clock$0).(DTurning_clock$0: uint32_t ==> DTurning_clock:=DTurning_clock$0) || @(o_IMove_moveForward$0).(o_IMove_moveForward$0: uint8_t ==> o_IMove_moveForward:=o_IMove_moveForward$0) || @(o_IMove_moveForward_linear_0$0).(o_IMove_moveForward_linear_0$0: uint8_t ==> o_IMove_moveForward_linear_0:=o_IMove_moveForward_linear_0$0) || @(o_IMove_moveForward_linear_1$0).(o_IMove_moveForward_linear_1$0: uint8_t ==> o_IMove_moveForward_linear_1:=o_IMove_moveForward_linear_1$0) || @(o_IMove_moveForward_linear_2$0).(o_IMove_moveForward_linear_2$0: uint8_t ==> o_IMove_moveForward_linear_2:=o_IMove_moveForward_linear_2$0) || @(o_IMove_moveForward_linear_3$0).(o_IMove_moveForward_linear_3$0: uint8_t ==> o_IMove_moveForward_linear_3:=o_IMove_moveForward_linear_3$0) || @(o_IMove_moveForward_linear_4$0).(o_IMove_moveForward_linear_4$0: uint8_t ==> o_IMove_moveForward_linear_4:=o_IMove_moveForward_linear_4$0) || @(o_IMove_moveForward_linear_5$0).(o_IMove_moveForward_linear_5$0: uint8_t ==> o_IMove_moveForward_linear_5:=o_IMove_moveForward_linear_5$0) || @(o_IMove_moveForward_linear_6$0).(o_IMove_moveForward_linear_6$0: uint8_t ==> o_IMove_moveForward_linear_6:=o_IMove_moveForward_linear_6$0) || @(o_IMove_turn$0).(o_IMove_turn$0: uint8_t ==> o_IMove_turn:=o_IMove_turn$0) || @(o_IMove_turn_angular_0$0).(o_IMove_turn_angular_0$0: uint8_t ==> o_IMove_turn_angular_0:=o_IMove_turn_angular_0$0) || @(o_IMove_turn_angular_1$0).(o_IMove_turn_angular_1$0: uint8_t ==> o_IMove_turn_angular_1:=o_IMove_turn_angular_1$0) || @(o_IMove_turn_angular_2$0).(o_IMove_turn_angular_2$0: uint8_t ==> o_IMove_turn_angular_2:=o_IMove_turn_angular_2$0) || @(o_IMove_turn_angular_3$0).(o_IMove_turn_angular_3$0: uint8_t ==> o_IMove_turn_angular_3:=o_IMove_turn_angular_3$0) || @(o_IMove_turn_angular_4$0).(o_IMove_turn_angular_4$0: uint8_t ==> o_IMove_turn_angular_4:=o_IMove_turn_angular_4$0) || @(o_IMove_turn_angular_5$0).(o_IMove_turn_angular_5$0: uint8_t ==> o_IMove_turn_angular_5:=o_IMove_turn_angular_5$0) || @(o_IMove_turn_angular_6$0).(o_IMove_turn_angular_6$0: uint8_t ==> o_IMove_turn_angular_6:=o_IMove_turn_angular_6$0) || @(o_IMove_avoid$0).(o_IMove_avoid$0: uint8_t ==> o_IMove_avoid:=o_IMove_avoid$0) || @(o_IMove_enableCollisionDetection$0).(o_IMove_enableCollisionDetection$0: uint8_t ==> o_IMove_enableCollisionDetection:=o_IMove_enableCollisionDetection$0) || @(o_IMove_disableCollisionDetection$0).(o_IMove_disableCollisionDetection$0: uint8_t ==> o_IMove_disableCollisionDetection:=o_IMove_disableCollisionDetection$0) || @(o_IObject_stop$0).(o_IObject_stop$0: uint8_t ==> o_IObject_stop:=o_IObject_stop$0)) [] not(smstate = EXEC_2) ==> (smstate = EXEC_3 ==> @since_D_.(@(since_D_$2).(since_D_$2: uint32_t ==> since_D_:=since_D_$2);(D_: uint32_t & since_D_: uint32_t | @(elapsed$0).(elapsed$0: uint32_t ==> since_D_:=elapsed$0));(since_D_<2 ==> smstate:=EXEC_3 [] not(since_D_<2) ==> (2<=since_D_ ==> ((btrue | @(o_IMove_enableCollisionDetection$0).(o_IMove_enableCollisionDetection$0: uint8_t ==> o_IMove_enableCollisionDetection:=o_IMove_enableCollisionDetection$0));(btrue | @(my_clock$0).(my_clock$0: uint8_t ==> my_clock:=my_clock$0) || @(smstate$0).(smstate$0: STATE ==> smstate:=smstate$0) || @(first_time$0).(first_time$0: BOOL ==> first_time:=first_time$0) || @(SimSquare_cycle_timer$0).(SimSquare_cycle_timer$0: uint32_t ==> SimSquare_cycle_timer:=SimSquare_cycle_timer$0) || @(C_$0).(C_$0: uint32_t ==> C_:=C_$0) || @(D_$0).(D_$0: uint32_t ==> D_:=D_$0) || @(segment$0).(segment$0: uint32_t ==> segment:=segment$0) || @(DTurning_clock$0).(DTurning_clock$0: uint32_t ==> DTurning_clock:=DTurning_clock$0) || @(o_IMove_moveForward$0).(o_IMove_moveForward$0: uint8_t ==> o_IMove_moveForward:=o_IMove_moveForward$0) || @(o_IMove_moveForward_linear_0$0).(o_IMove_moveForward_linear_0$0: uint8_t ==> o_IMove_moveForward_linear_0:=o_IMove_moveForward_linear_0$0) || @(o_IMove_moveForward_linear_1$0).(o_IMove_moveForward_linear_1$0: uint8_t ==> o_IMove_moveForward_linear_1:=o_IMove_moveForward_linear_1$0) || @(o_IMove_moveForward_linear_2$0).(o_IMove_moveForward_linear_2$0: uint8_t ==> o_IMove_moveForward_linear_2:=o_IMove_moveForward_linear_2$0) || @(o_IMove_moveForward_linear_3$0).(o_IMove_moveForward_linear_3$0: uint8_t ==> o_IMove_moveForward_linear_3:=o_IMove_moveForward_linear_3$0) || @(o_IMove_moveForward_linear_4$0).(o_IMove_moveForward_linear_4$0: uint8_t ==> o_IMove_moveForward_linear_4:=o_IMove_moveForward_linear_4$0) || @(o_IMove_moveForward_linear_5$0).(o_IMove_moveForward_linear_5$0: uint8_t ==> o_IMove_moveForward_linear_5:=o_IMove_moveForward_linear_5$0) || @(o_IMove_moveForward_linear_6$0).(o_IMove_moveForward_linear_6$0: uint8_t ==> o_IMove_moveForward_linear_6:=o_IMove_moveForward_linear_6$0) || @(o_IMove_turn$0).(o_IMove_turn$0: uint8_t ==> o_IMove_turn:=o_IMove_turn$0) || @(o_IMove_turn_angular_0$0).(o_IMove_turn_angular_0$0: uint8_t ==> o_IMove_turn_angular_0:=o_IMove_turn_angular_0$0) || @(o_IMove_turn_angular_1$0).(o_IMove_turn_angular_1$0: uint8_t ==> o_IMove_turn_angular_1:=o_IMove_turn_angular_1$0) || @(o_IMove_turn_angular_2$0).(o_IMove_turn_angular_2$0: uint8_t ==> o_IMove_turn_angular_2:=o_IMove_turn_angular_2$0) || @(o_IMove_turn_angular_3$0).(o_IMove_turn_angular_3$0: uint8_t ==> o_IMove_turn_angular_3:=o_IMove_turn_angular_3$0) || @(o_IMove_turn_angular_4$0).(o_IMove_turn_angular_4$0: uint8_t ==> o_IMove_turn_angular_4:=o_IMove_turn_angular_4$0) || @(o_IMove_turn_angular_5$0).(o_IMove_turn_angular_5$0: uint8_t ==> o_IMove_turn_angular_5:=o_IMove_turn_angular_5$0) || @(o_IMove_turn_angular_6$0).(o_IMove_turn_angular_6$0: uint8_t ==> o_IMove_turn_angular_6:=o_IMove_turn_angular_6$0) || @(o_IMove_avoid$0).(o_IMove_avoid$0: uint8_t ==> o_IMove_avoid:=o_IMove_avoid$0) || @(o_IMove_enableCollisionDetection$0).(o_IMove_enableCollisionDetection$0: uint8_t ==> o_IMove_enableCollisionDetection:=o_IMove_enableCollisionDetection$0) || @(o_IMove_disableCollisionDetection$0).(o_IMove_disableCollisionDetection$0: uint8_t ==> o_IMove_disableCollisionDetection:=o_IMove_disableCollisionDetection$0) || @(o_IObject_stop$0).(o_IObject_stop$0: uint8_t ==> o_IObject_stop:=o_IObject_stop$0))) [] not(2<=since_D_) ==> skip))) [] not(smstate = EXEC_3) ==> (smstate = FINAL ==> skip [] not(smstate = FINAL) ==> skip)))));
  Expanded_List_Substitution(Implementation(logic_i),write_model_outputs)==(btrue | mbc_board_id = OP_IMove_moveForward ==> ((o_IMove_moveForward: INT | board_0_O1:=o_IMove_moveForward);(o_IMove_moveForward_linear_0: INT | board_0_O2:=o_IMove_moveForward_linear_0);(o_IMove_moveForward_linear_1: INT | board_0_O3:=o_IMove_moveForward_linear_1);(o_IMove_moveForward_linear_2: INT | board_0_O4:=o_IMove_moveForward_linear_2);(o_IMove_moveForward_linear_3: INT | board_0_O5:=o_IMove_moveForward_linear_3);(o_IMove_moveForward_linear_4: INT | board_0_O6:=o_IMove_moveForward_linear_4);(o_IMove_moveForward_linear_5: INT | board_0_O7:=o_IMove_moveForward_linear_5);(o_IMove_moveForward_linear_6: INT | board_0_O8:=o_IMove_moveForward_linear_6)) [] not(mbc_board_id = OP_IMove_moveForward) ==> (mbc_board_id = OP_IMove_turn ==> ((o_IMove_turn: INT | board_0_O1:=o_IMove_turn);(o_IMove_turn_angular_0: INT | board_0_O2:=o_IMove_turn_angular_0);(o_IMove_turn_angular_1: INT | board_0_O3:=o_IMove_turn_angular_1);(o_IMove_turn_angular_2: INT | board_0_O4:=o_IMove_turn_angular_2);(o_IMove_turn_angular_3: INT | board_0_O5:=o_IMove_turn_angular_3);(o_IMove_turn_angular_4: INT | board_0_O6:=o_IMove_turn_angular_4);(o_IMove_turn_angular_5: INT | board_0_O7:=o_IMove_turn_angular_5);(o_IMove_turn_angular_6: INT | board_0_O8:=o_IMove_turn_angular_6)) [] not(mbc_board_id = OP_IMove_turn) ==> (mbc_board_id = OP_IMove_avoid_enableCollisionDetection_disableCollisionDetection ==> ((o_IObject_stop: INT | board_0_O1:=o_IObject_stop);(o_IMove_avoid: INT | board_0_O2:=o_IMove_avoid);(o_IMove_enableCollisionDetection: INT | board_0_O3:=o_IMove_enableCollisionDetection);(o_IMove_disableCollisionDetection: INT | board_0_O4:=o_IMove_disableCollisionDetection);(IO_OFF: INT | board_0_O5:=IO_OFF);(IO_OFF: INT | board_0_O6:=IO_OFF);(IO_OFF: INT | board_0_O7:=IO_OFF);(IO_OFF: INT | board_0_O8:=IO_OFF)) [] not(mbc_board_id = OP_IMove_avoid_enableCollisionDetection_disableCollisionDetection) ==> skip)));
  Expanded_List_Substitution(Implementation(logic_i),read_model_inputs)==(btrue & i_IObject_collisionDetected: uint8_t | i_IObject_collisionDetected:=board_0_I2);
  Expanded_List_Substitution(Implementation(logic_i),reset_outputs)==(btrue | (IO_OFF: INT | board_0_O1:=IO_OFF);(IO_OFF: INT | board_0_O2:=IO_OFF);(IO_OFF: INT | board_0_O3:=IO_OFF);(IO_OFF: INT | board_0_O4:=IO_OFF);(IO_OFF: INT | board_0_O5:=IO_OFF);(IO_OFF: INT | board_0_O6:=IO_OFF);(IO_OFF: INT | board_0_O7:=IO_OFF);(IO_OFF: INT | board_0_O8:=IO_OFF);(IO_OFF: INT | o_IMove_moveForward:=IO_OFF);(IO_OFF: INT | o_IMove_moveForward_linear_0:=IO_OFF);(IO_OFF: INT | o_IMove_moveForward_linear_1:=IO_OFF);(IO_OFF: INT | o_IMove_moveForward_linear_2:=IO_OFF);(IO_OFF: INT | o_IMove_moveForward_linear_3:=IO_OFF);(IO_OFF: INT | o_IMove_moveForward_linear_4:=IO_OFF);(IO_OFF: INT | o_IMove_moveForward_linear_5:=IO_OFF);(IO_OFF: INT | o_IMove_moveForward_linear_6:=IO_OFF);(IO_OFF: INT | o_IMove_turn:=IO_OFF);(IO_OFF: INT | o_IMove_turn_angular_0:=IO_OFF);(IO_OFF: INT | o_IMove_turn_angular_1:=IO_OFF);(IO_OFF: INT | o_IMove_turn_angular_2:=IO_OFF);(IO_OFF: INT | o_IMove_turn_angular_3:=IO_OFF);(IO_OFF: INT | o_IMove_turn_angular_4:=IO_OFF);(IO_OFF: INT | o_IMove_turn_angular_5:=IO_OFF);(IO_OFF: INT | o_IMove_turn_angular_6:=IO_OFF);(IO_OFF: INT | o_IMove_avoid:=IO_OFF);(IO_OFF: INT | o_IMove_enableCollisionDetection:=IO_OFF);(IO_OFF: INT | o_IMove_disableCollisionDetection:=IO_OFF);(IO_OFF: INT | o_IObject_stop:=IO_OFF));
  Expanded_List_Substitution(Implementation(logic_i),reset_cycle_timers)==(btrue & current_time: INT | SimSquare_cycle_timer:=current_time);
  Expanded_List_Substitution(Implementation(logic_i),write_output)==(nn: uint32_t & nn: 0..max_board_output & nn: uint32_t & nn: 0..max_board_output & board_0_O7: uint8_t & board_0_O6: uint8_t & board_0_O5: uint8_t & board_0_O4: uint8_t & board_0_O3: uint8_t & board_0_O2: uint8_t & board_0_O1: uint8_t | @(o6$0).(o6$0: uint8_t ==> board_0_O7:=o6$0) || @(o5$0).(o5$0: uint8_t ==> board_0_O6:=o5$0) || @(o4$0).(o4$0: uint8_t ==> board_0_O5:=o4$0) || @(o3$0).(o3$0: uint8_t ==> board_0_O4:=o3$0) || @(o2$0).(o2$0: uint8_t ==> board_0_O3:=o2$0) || @(o1$0).(o1$0: uint8_t ==> board_0_O2:=o1$0) || @(o0$0).(o0$0: uint8_t ==> board_0_O1:=o0$0));
  Expanded_List_Substitution(Implementation(logic_i),lnot)==(pp: BOOL & result: BOOL | result:=FALSE;(pp = FALSE ==> result:=TRUE [] not(pp = FALSE) ==> skip));
  Expanded_List_Substitution(Implementation(logic_i),lor)==(pp: BOOL & qq: BOOL & result: BOOL | result:=TRUE;(pp = FALSE ==> (qq = FALSE ==> result:=FALSE [] not(qq = FALSE) ==> skip) [] not(pp = FALSE) ==> skip));
  Expanded_List_Substitution(Implementation(logic_i),land)==(pp: BOOL & qq: BOOL & result: BOOL | result:=FALSE;(pp = TRUE ==> (qq = TRUE ==> result:=TRUE [] not(qq = TRUE) ==> skip) [] not(pp = TRUE) ==> skip));
  Expanded_List_Substitution(Implementation(logic_i),since)==(timer: uint32_t & elapsed: uint32_t | @(elapsed$1).(elapsed$1: uint32_t ==> elapsed:=elapsed$1);@local_time.(@(local_time$2).(local_time$2: uint32_t ==> local_time:=local_time$2);(current_time: INT | local_time:=current_time);(sub_uint32(local_time,timer): INT & local_time,timer: dom(sub_uint32) | elapsed:=sub_uint32(local_time,timer))));
  Expanded_List_Substitution(Implementation(logic_i),execute_model_cycle)==(btrue | (btrue | @(SimSquare_cycle_timer$0).(SimSquare_cycle_timer$0: uint32_t ==> SimSquare_cycle_timer:=SimSquare_cycle_timer$0));(btrue | @(board_0_O1$0).(board_0_O1$0: uint8_t ==> board_0_O1:=board_0_O1$0) || @(board_0_O2$0).(board_0_O2$0: uint8_t ==> board_0_O2:=board_0_O2$0) || @(board_0_O3$0).(board_0_O3$0: uint8_t ==> board_0_O3:=board_0_O3$0) || @(board_0_O4$0).(board_0_O4$0: uint8_t ==> board_0_O4:=board_0_O4$0) || @(board_0_O5$0).(board_0_O5$0: uint8_t ==> board_0_O5:=board_0_O5$0) || @(board_0_O6$0).(board_0_O6$0: uint8_t ==> board_0_O6:=board_0_O6$0) || @(board_0_O7$0).(board_0_O7$0: uint8_t ==> board_0_O7:=board_0_O7$0) || @(board_0_O8$0).(board_0_O8$0: uint8_t ==> board_0_O8:=board_0_O8$0));(btrue | @(i_IObject_collisionDetected$0).(i_IObject_collisionDetected$0: uint8_t ==> i_IObject_collisionDetected:=i_IObject_collisionDetected$0));(btrue | @(my_clock$0).(my_clock$0: uint8_t ==> my_clock:=my_clock$0) || @(smstate$0).(smstate$0: STATE ==> smstate:=smstate$0) || @(first_time$0).(first_time$0: BOOL ==> first_time:=first_time$0) || @(SimSquare_cycle_timer$0).(SimSquare_cycle_timer$0: uint32_t ==> SimSquare_cycle_timer:=SimSquare_cycle_timer$0) || @(C_$0).(C_$0: uint32_t ==> C_:=C_$0) || @(D_$0).(D_$0: uint32_t ==> D_:=D_$0) || @(segment$0).(segment$0: uint32_t ==> segment:=segment$0) || @(DTurning_clock$0).(DTurning_clock$0: uint32_t ==> DTurning_clock:=DTurning_clock$0) || @(o_IMove_moveForward$0).(o_IMove_moveForward$0: uint8_t ==> o_IMove_moveForward:=o_IMove_moveForward$0) || @(o_IMove_moveForward_linear_0$0).(o_IMove_moveForward_linear_0$0: uint8_t ==> o_IMove_moveForward_linear_0:=o_IMove_moveForward_linear_0$0) || @(o_IMove_moveForward_linear_1$0).(o_IMove_moveForward_linear_1$0: uint8_t ==> o_IMove_moveForward_linear_1:=o_IMove_moveForward_linear_1$0) || @(o_IMove_moveForward_linear_2$0).(o_IMove_moveForward_linear_2$0: uint8_t ==> o_IMove_moveForward_linear_2:=o_IMove_moveForward_linear_2$0) || @(o_IMove_moveForward_linear_3$0).(o_IMove_moveForward_linear_3$0: uint8_t ==> o_IMove_moveForward_linear_3:=o_IMove_moveForward_linear_3$0) || @(o_IMove_moveForward_linear_4$0).(o_IMove_moveForward_linear_4$0: uint8_t ==> o_IMove_moveForward_linear_4:=o_IMove_moveForward_linear_4$0) || @(o_IMove_moveForward_linear_5$0).(o_IMove_moveForward_linear_5$0: uint8_t ==> o_IMove_moveForward_linear_5:=o_IMove_moveForward_linear_5$0) || @(o_IMove_moveForward_linear_6$0).(o_IMove_moveForward_linear_6$0: uint8_t ==> o_IMove_moveForward_linear_6:=o_IMove_moveForward_linear_6$0) || @(o_IMove_turn$0).(o_IMove_turn$0: uint8_t ==> o_IMove_turn:=o_IMove_turn$0) || @(o_IMove_turn_angular_0$0).(o_IMove_turn_angular_0$0: uint8_t ==> o_IMove_turn_angular_0:=o_IMove_turn_angular_0$0) || @(o_IMove_turn_angular_1$0).(o_IMove_turn_angular_1$0: uint8_t ==> o_IMove_turn_angular_1:=o_IMove_turn_angular_1$0) || @(o_IMove_turn_angular_2$0).(o_IMove_turn_angular_2$0: uint8_t ==> o_IMove_turn_angular_2:=o_IMove_turn_angular_2$0) || @(o_IMove_turn_angular_3$0).(o_IMove_turn_angular_3$0: uint8_t ==> o_IMove_turn_angular_3:=o_IMove_turn_angular_3$0) || @(o_IMove_turn_angular_4$0).(o_IMove_turn_angular_4$0: uint8_t ==> o_IMove_turn_angular_4:=o_IMove_turn_angular_4$0) || @(o_IMove_turn_angular_5$0).(o_IMove_turn_angular_5$0: uint8_t ==> o_IMove_turn_angular_5:=o_IMove_turn_angular_5$0) || @(o_IMove_turn_angular_6$0).(o_IMove_turn_angular_6$0: uint8_t ==> o_IMove_turn_angular_6:=o_IMove_turn_angular_6$0) || @(o_IMove_avoid$0).(o_IMove_avoid$0: uint8_t ==> o_IMove_avoid:=o_IMove_avoid$0) || @(o_IMove_enableCollisionDetection$0).(o_IMove_enableCollisionDetection$0: uint8_t ==> o_IMove_enableCollisionDetection:=o_IMove_enableCollisionDetection$0) || @(o_IMove_disableCollisionDetection$0).(o_IMove_disableCollisionDetection$0: uint8_t ==> o_IMove_disableCollisionDetection:=o_IMove_disableCollisionDetection$0) || @(o_IObject_stop$0).(o_IObject_stop$0: uint8_t ==> o_IObject_stop:=o_IObject_stop$0));(btrue | @(board_0_O1$0).(board_0_O1$0: uint8_t ==> board_0_O1:=board_0_O1$0) || @(board_0_O2$0).(board_0_O2$0: uint8_t ==> board_0_O2:=board_0_O2$0) || @(board_0_O3$0).(board_0_O3$0: uint8_t ==> board_0_O3:=board_0_O3$0) || @(board_0_O4$0).(board_0_O4$0: uint8_t ==> board_0_O4:=board_0_O4$0) || @(board_0_O5$0).(board_0_O5$0: uint8_t ==> board_0_O5:=board_0_O5$0) || @(board_0_O6$0).(board_0_O6$0: uint8_t ==> board_0_O6:=board_0_O6$0) || @(board_0_O7$0).(board_0_O7$0: uint8_t ==> board_0_O7:=board_0_O7$0) || @(board_0_O8$0).(board_0_O8$0: uint8_t ==> board_0_O8:=board_0_O8$0)));
  Expanded_List_Substitution(Implementation(logic_i),read_master_clock)==(btrue | @master_clock.(@(master_clock$2).(master_clock$2: uint8_t ==> master_clock:=master_clock$2);(master_clock: uint8_t | master_clock:=board_0_I1);(master_clock = my_clock ==> skip [] not(master_clock = my_clock) ==> ((add_uint32(current_time,1): INT & current_time,1: dom(add_uint32) | current_time:=add_uint32(current_time,1));(master_clock: INT | my_clock:=master_clock)))));
  Expanded_List_Substitution(Implementation(logic_i),user_logic)==(btrue | (btrue | @(current_time$0).(current_time$0: uint32_t ==> current_time:=current_time$0) || @(my_clock$0).(my_clock$0: uint8_t ==> my_clock:=my_clock$0));(first_time = TRUE ==> ((btrue | @(my_clock$0).(my_clock$0: uint8_t ==> my_clock:=my_clock$0) || @(smstate$0).(smstate$0: STATE ==> smstate:=smstate$0) || @(first_time$0).(first_time$0: BOOL ==> first_time:=first_time$0) || @(SimSquare_cycle_timer$0).(SimSquare_cycle_timer$0: uint32_t ==> SimSquare_cycle_timer:=SimSquare_cycle_timer$0) || @(C_$0).(C_$0: uint32_t ==> C_:=C_$0) || @(D_$0).(D_$0: uint32_t ==> D_:=D_$0) || @(segment$0).(segment$0: uint32_t ==> segment:=segment$0) || @(DTurning_clock$0).(DTurning_clock$0: uint32_t ==> DTurning_clock:=DTurning_clock$0) || @(o_IMove_moveForward$0).(o_IMove_moveForward$0: uint8_t ==> o_IMove_moveForward:=o_IMove_moveForward$0) || @(o_IMove_moveForward_linear_0$0).(o_IMove_moveForward_linear_0$0: uint8_t ==> o_IMove_moveForward_linear_0:=o_IMove_moveForward_linear_0$0) || @(o_IMove_moveForward_linear_1$0).(o_IMove_moveForward_linear_1$0: uint8_t ==> o_IMove_moveForward_linear_1:=o_IMove_moveForward_linear_1$0) || @(o_IMove_moveForward_linear_2$0).(o_IMove_moveForward_linear_2$0: uint8_t ==> o_IMove_moveForward_linear_2:=o_IMove_moveForward_linear_2$0) || @(o_IMove_moveForward_linear_3$0).(o_IMove_moveForward_linear_3$0: uint8_t ==> o_IMove_moveForward_linear_3:=o_IMove_moveForward_linear_3$0) || @(o_IMove_moveForward_linear_4$0).(o_IMove_moveForward_linear_4$0: uint8_t ==> o_IMove_moveForward_linear_4:=o_IMove_moveForward_linear_4$0) || @(o_IMove_moveForward_linear_5$0).(o_IMove_moveForward_linear_5$0: uint8_t ==> o_IMove_moveForward_linear_5:=o_IMove_moveForward_linear_5$0) || @(o_IMove_moveForward_linear_6$0).(o_IMove_moveForward_linear_6$0: uint8_t ==> o_IMove_moveForward_linear_6:=o_IMove_moveForward_linear_6$0) || @(o_IMove_turn$0).(o_IMove_turn$0: uint8_t ==> o_IMove_turn:=o_IMove_turn$0) || @(o_IMove_turn_angular_0$0).(o_IMove_turn_angular_0$0: uint8_t ==> o_IMove_turn_angular_0:=o_IMove_turn_angular_0$0) || @(o_IMove_turn_angular_1$0).(o_IMove_turn_angular_1$0: uint8_t ==> o_IMove_turn_angular_1:=o_IMove_turn_angular_1$0) || @(o_IMove_turn_angular_2$0).(o_IMove_turn_angular_2$0: uint8_t ==> o_IMove_turn_angular_2:=o_IMove_turn_angular_2$0) || @(o_IMove_turn_angular_3$0).(o_IMove_turn_angular_3$0: uint8_t ==> o_IMove_turn_angular_3:=o_IMove_turn_angular_3$0) || @(o_IMove_turn_angular_4$0).(o_IMove_turn_angular_4$0: uint8_t ==> o_IMove_turn_angular_4:=o_IMove_turn_angular_4$0) || @(o_IMove_turn_angular_5$0).(o_IMove_turn_angular_5$0: uint8_t ==> o_IMove_turn_angular_5:=o_IMove_turn_angular_5$0) || @(o_IMove_turn_angular_6$0).(o_IMove_turn_angular_6$0: uint8_t ==> o_IMove_turn_angular_6:=o_IMove_turn_angular_6$0) || @(o_IMove_avoid$0).(o_IMove_avoid$0: uint8_t ==> o_IMove_avoid:=o_IMove_avoid$0) || @(o_IMove_enableCollisionDetection$0).(o_IMove_enableCollisionDetection$0: uint8_t ==> o_IMove_enableCollisionDetection:=o_IMove_enableCollisionDetection$0) || @(o_IMove_disableCollisionDetection$0).(o_IMove_disableCollisionDetection$0: uint8_t ==> o_IMove_disableCollisionDetection:=o_IMove_disableCollisionDetection$0) || @(o_IObject_stop$0).(o_IObject_stop$0: uint8_t ==> o_IObject_stop:=o_IObject_stop$0));first_time:=FALSE) [] not(first_time = TRUE) ==> @since_value.(@(since_value$2).(since_value$2: uint32_t ==> since_value:=since_value$2);(SimSquare_cycle_timer: uint32_t & since_value: uint32_t | @(elapsed$0).(elapsed$0: uint32_t ==> since_value:=elapsed$0));(since_value<SimSquare_cycle_def ==> skip [] not(since_value<SimSquare_cycle_def) ==> (btrue | @(my_clock$0).(my_clock$0: uint8_t ==> my_clock:=my_clock$0) || @(smstate$0).(smstate$0: STATE ==> smstate:=smstate$0) || @(first_time$0).(first_time$0: BOOL ==> first_time:=first_time$0) || @(SimSquare_cycle_timer$0).(SimSquare_cycle_timer$0: uint32_t ==> SimSquare_cycle_timer:=SimSquare_cycle_timer$0) || @(C_$0).(C_$0: uint32_t ==> C_:=C_$0) || @(D_$0).(D_$0: uint32_t ==> D_:=D_$0) || @(segment$0).(segment$0: uint32_t ==> segment:=segment$0) || @(DTurning_clock$0).(DTurning_clock$0: uint32_t ==> DTurning_clock:=DTurning_clock$0) || @(o_IMove_moveForward$0).(o_IMove_moveForward$0: uint8_t ==> o_IMove_moveForward:=o_IMove_moveForward$0) || @(o_IMove_moveForward_linear_0$0).(o_IMove_moveForward_linear_0$0: uint8_t ==> o_IMove_moveForward_linear_0:=o_IMove_moveForward_linear_0$0) || @(o_IMove_moveForward_linear_1$0).(o_IMove_moveForward_linear_1$0: uint8_t ==> o_IMove_moveForward_linear_1:=o_IMove_moveForward_linear_1$0) || @(o_IMove_moveForward_linear_2$0).(o_IMove_moveForward_linear_2$0: uint8_t ==> o_IMove_moveForward_linear_2:=o_IMove_moveForward_linear_2$0) || @(o_IMove_moveForward_linear_3$0).(o_IMove_moveForward_linear_3$0: uint8_t ==> o_IMove_moveForward_linear_3:=o_IMove_moveForward_linear_3$0) || @(o_IMove_moveForward_linear_4$0).(o_IMove_moveForward_linear_4$0: uint8_t ==> o_IMove_moveForward_linear_4:=o_IMove_moveForward_linear_4$0) || @(o_IMove_moveForward_linear_5$0).(o_IMove_moveForward_linear_5$0: uint8_t ==> o_IMove_moveForward_linear_5:=o_IMove_moveForward_linear_5$0) || @(o_IMove_moveForward_linear_6$0).(o_IMove_moveForward_linear_6$0: uint8_t ==> o_IMove_moveForward_linear_6:=o_IMove_moveForward_linear_6$0) || @(o_IMove_turn$0).(o_IMove_turn$0: uint8_t ==> o_IMove_turn:=o_IMove_turn$0) || @(o_IMove_turn_angular_0$0).(o_IMove_turn_angular_0$0: uint8_t ==> o_IMove_turn_angular_0:=o_IMove_turn_angular_0$0) || @(o_IMove_turn_angular_1$0).(o_IMove_turn_angular_1$0: uint8_t ==> o_IMove_turn_angular_1:=o_IMove_turn_angular_1$0) || @(o_IMove_turn_angular_2$0).(o_IMove_turn_angular_2$0: uint8_t ==> o_IMove_turn_angular_2:=o_IMove_turn_angular_2$0) || @(o_IMove_turn_angular_3$0).(o_IMove_turn_angular_3$0: uint8_t ==> o_IMove_turn_angular_3:=o_IMove_turn_angular_3$0) || @(o_IMove_turn_angular_4$0).(o_IMove_turn_angular_4$0: uint8_t ==> o_IMove_turn_angular_4:=o_IMove_turn_angular_4$0) || @(o_IMove_turn_angular_5$0).(o_IMove_turn_angular_5$0: uint8_t ==> o_IMove_turn_angular_5:=o_IMove_turn_angular_5$0) || @(o_IMove_turn_angular_6$0).(o_IMove_turn_angular_6$0: uint8_t ==> o_IMove_turn_angular_6:=o_IMove_turn_angular_6$0) || @(o_IMove_avoid$0).(o_IMove_avoid$0: uint8_t ==> o_IMove_avoid:=o_IMove_avoid$0) || @(o_IMove_enableCollisionDetection$0).(o_IMove_enableCollisionDetection$0: uint8_t ==> o_IMove_enableCollisionDetection:=o_IMove_enableCollisionDetection$0) || @(o_IMove_disableCollisionDetection$0).(o_IMove_disableCollisionDetection$0: uint8_t ==> o_IMove_disableCollisionDetection:=o_IMove_disableCollisionDetection$0) || @(o_IObject_stop$0).(o_IObject_stop$0: uint8_t ==> o_IObject_stop:=o_IObject_stop$0))))));
  List_Substitution(Implementation(logic_i),user_logic)==(read_master_clock;IF first_time = TRUE THEN execute_model_cycle;first_time:=FALSE ELSE VAR since_value IN since_value: (since_value: uint32_t);since_value <-- since(SimSquare_cycle_timer);IF since_value<SimSquare_cycle_def THEN skip ELSE execute_model_cycle END END END);
  List_Substitution(Implementation(logic_i),read_master_clock)==(VAR master_clock IN master_clock: (master_clock: uint8_t);master_clock <-- get_board_0_I1;IF master_clock = my_clock THEN skip ELSE current_time:=add_uint32(current_time,1);my_clock:=master_clock END END);
  List_Substitution(Implementation(logic_i),execute_model_cycle)==(reset_cycle_timers;reset_outputs;read_model_inputs;state_machine;write_model_outputs);
  List_Substitution(Implementation(logic_i),since)==(elapsed: (elapsed: uint32_t);VAR local_time IN local_time: (local_time: uint32_t);local_time:=current_time;elapsed:=sub_uint32(local_time,timer) END);
  List_Substitution(Implementation(logic_i),land)==(result:=FALSE;IF pp = TRUE THEN IF qq = TRUE THEN result:=TRUE END END);
  List_Substitution(Implementation(logic_i),lor)==(result:=TRUE;IF pp = FALSE THEN IF qq = FALSE THEN result:=FALSE END END);
  List_Substitution(Implementation(logic_i),lnot)==(result:=FALSE;IF pp = FALSE THEN result:=TRUE END);
  List_Substitution(Implementation(logic_i),write_output)==(board_0_O7,board_0_O6,board_0_O5,board_0_O4,board_0_O3,board_0_O2,board_0_O1 <-- nat_7_bits_to_bin_7_bits(nn));
  List_Substitution(Implementation(logic_i),reset_cycle_timers)==(SimSquare_cycle_timer:=current_time);
  List_Substitution(Implementation(logic_i),reset_outputs)==(board_0_O1:=IO_OFF;board_0_O2:=IO_OFF;board_0_O3:=IO_OFF;board_0_O4:=IO_OFF;board_0_O5:=IO_OFF;board_0_O6:=IO_OFF;board_0_O7:=IO_OFF;board_0_O8:=IO_OFF;o_IMove_moveForward:=IO_OFF;o_IMove_moveForward_linear_0:=IO_OFF;o_IMove_moveForward_linear_1:=IO_OFF;o_IMove_moveForward_linear_2:=IO_OFF;o_IMove_moveForward_linear_3:=IO_OFF;o_IMove_moveForward_linear_4:=IO_OFF;o_IMove_moveForward_linear_5:=IO_OFF;o_IMove_moveForward_linear_6:=IO_OFF;o_IMove_turn:=IO_OFF;o_IMove_turn_angular_0:=IO_OFF;o_IMove_turn_angular_1:=IO_OFF;o_IMove_turn_angular_2:=IO_OFF;o_IMove_turn_angular_3:=IO_OFF;o_IMove_turn_angular_4:=IO_OFF;o_IMove_turn_angular_5:=IO_OFF;o_IMove_turn_angular_6:=IO_OFF;o_IMove_avoid:=IO_OFF;o_IMove_enableCollisionDetection:=IO_OFF;o_IMove_disableCollisionDetection:=IO_OFF;o_IObject_stop:=IO_OFF);
  List_Substitution(Implementation(logic_i),read_model_inputs)==(i_IObject_collisionDetected <-- get_board_0_I2);
  List_Substitution(Implementation(logic_i),write_model_outputs)==(IF mbc_board_id = OP_IMove_moveForward THEN board_0_O1:=o_IMove_moveForward;board_0_O2:=o_IMove_moveForward_linear_0;board_0_O3:=o_IMove_moveForward_linear_1;board_0_O4:=o_IMove_moveForward_linear_2;board_0_O5:=o_IMove_moveForward_linear_3;board_0_O6:=o_IMove_moveForward_linear_4;board_0_O7:=o_IMove_moveForward_linear_5;board_0_O8:=o_IMove_moveForward_linear_6 ELSIF mbc_board_id = OP_IMove_turn THEN board_0_O1:=o_IMove_turn;board_0_O2:=o_IMove_turn_angular_0;board_0_O3:=o_IMove_turn_angular_1;board_0_O4:=o_IMove_turn_angular_2;board_0_O5:=o_IMove_turn_angular_3;board_0_O6:=o_IMove_turn_angular_4;board_0_O7:=o_IMove_turn_angular_5;board_0_O8:=o_IMove_turn_angular_6 ELSIF mbc_board_id = OP_IMove_avoid_enableCollisionDetection_disableCollisionDetection THEN board_0_O1:=o_IObject_stop;board_0_O2:=o_IMove_avoid;board_0_O3:=o_IMove_enableCollisionDetection;board_0_O4:=o_IMove_disableCollisionDetection;board_0_O5:=IO_OFF;board_0_O6:=IO_OFF;board_0_O7:=IO_OFF;board_0_O8:=IO_OFF ELSE skip END);
  List_Substitution(Implementation(logic_i),state_machine)==(IF smstate = INIT THEN C_:=current_time;segment:=0;moveForward(linear);enableCollisionDetection;branching_condition_1 ELSIF smstate = EXEC_1 THEN VAR since_DTurning_clock IN since_DTurning_clock: (since_DTurning_clock: uint32_t);since_DTurning_clock <-- since(DTurning_clock);IF since_DTurning_clock<2 THEN smstate:=EXEC_1 ELSIF since_DTurning_clock = 2 THEN C_:=current_time;moveForward(linear);enableCollisionDetection;branching_condition_1 END END ELSIF smstate = EXEC_2 THEN branching_condition_1 ELSIF smstate = EXEC_3 THEN VAR since_D_ IN since_D_: (since_D_: uint32_t);since_D_ <-- since(D_);IF since_D_<2 THEN smstate:=EXEC_3 ELSIF 2<=since_D_ THEN enableCollisionDetection;branching_condition_1 END END ELSIF smstate = FINAL THEN skip ELSE skip END);
  List_Substitution(Implementation(logic_i),branching_condition_1)==(VAR since_C_ IN since_C_: (since_C_: uint32_t);since_C_ <-- since(C_);VAR boolean_literal_1,boolean_literal_2,condition_1,condition_2,condition_3,condition_4,condition_4_1,condition_4_1_1,condition_4_2,condition_4_2_1,condition_4_3,condition_4_3_1 IN boolean_literal_1: (boolean_literal_1: BOOL);boolean_literal_2: (boolean_literal_2: BOOL);condition_1: (condition_1: BOOL);condition_2: (condition_2: BOOL);condition_3: (condition_3: BOOL);condition_4: (condition_4: BOOL);condition_4_1: (condition_4_1: BOOL);condition_4_1_1: (condition_4_1_1: BOOL);condition_4_2: (condition_4_2: BOOL);condition_4_2_1: (condition_4_2_1: BOOL);condition_4_3: (condition_4_3: BOOL);condition_4_3_1: (condition_4_3_1: BOOL);boolean_literal_1:=bool(since_C_ = 5);boolean_literal_2:=bool(segment<4);condition_1 <-- land(boolean_literal_1,boolean_literal_2);boolean_literal_1:=bool(since_C_ = 5);boolean_literal_2:=bool(segment = 4);condition_2 <-- land(boolean_literal_1,boolean_literal_2);boolean_literal_1:=bool(i_IObject_collisionDetected = IO_ON);boolean_literal_2:=bool(segment<3);condition_3 <-- land(boolean_literal_1,boolean_literal_2);boolean_literal_1:=bool(since_C_ = 5);boolean_literal_2:=bool(segment<4);condition_4_1 <-- land(boolean_literal_1,boolean_literal_2);condition_4_1 <-- lnot(condition_4_1);boolean_literal_1:=bool(since_C_ = 5);boolean_literal_2:=bool(segment = 4);condition_4_2 <-- land(boolean_literal_1,boolean_literal_2);condition_4_2 <-- lnot(condition_4_2);boolean_literal_1:=bool(i_IObject_collisionDetected = IO_ON);boolean_literal_2:=bool(segment<3);condition_4_3 <-- land(boolean_literal_1,boolean_literal_2);condition_4_3 <-- lnot(condition_4_3);condition_4 <-- land(condition_4_1,condition_4_2);condition_4 <-- land(condition_4,condition_4_3);IF condition_1 = TRUE THEN disableCollisionDetection;segment:=add_uint32(segment,1);stop;turn(angular);DTurning_clock:=current_time;VAR since_DTurning_clock IN since_DTurning_clock: (since_DTurning_clock: uint32_t);since_DTurning_clock <-- since(DTurning_clock);IF since_DTurning_clock<2 THEN smstate:=EXEC_1 END END ELSIF condition_2 = TRUE THEN stop;smstate:=FINAL ELSIF condition_3 = TRUE THEN disableCollisionDetection;avoid;D_:=current_time;VAR since_D_ IN since_D_: (since_D_: uint32_t);since_D_ <-- since(D_);IF since_D_<2 THEN smstate:=EXEC_3 END END ELSIF condition_4 = TRUE THEN smstate:=EXEC_2 END END END);
  List_Substitution(Implementation(logic_i),nat_7_bits_to_bin_7_bits)==(o6: (o6: uint8_t);o5: (o5: uint8_t);o4: (o4: uint8_t);o3: (o3: uint8_t);o2: (o2: uint8_t);o1: (o1: uint8_t);o0: (o0: uint8_t);VAR o_aux IN o_aux: (o_aux: uint32_t);o_aux:=nn mod 2;IF o_aux = 0 THEN o0:=IO_OFF ELSE o0:=IO_ON END;o_aux:=nn/2;o_aux:=o_aux mod 2;IF o_aux = 0 THEN o1:=IO_OFF ELSE o1:=IO_ON END;o_aux:=nn/4;o_aux:=o_aux mod 2;IF o_aux = 0 THEN o2:=IO_OFF ELSE o2:=IO_ON END;o_aux:=nn/8;o_aux:=o_aux mod 2;IF o_aux = 0 THEN o3:=IO_OFF ELSE o3:=IO_ON END;o_aux:=nn/16;o_aux:=o_aux mod 2;IF o_aux = 0 THEN o4:=IO_OFF ELSE o4:=IO_ON END;o_aux:=nn/32;o_aux:=o_aux mod 2;IF o_aux = 0 THEN o5:=IO_OFF ELSE o5:=IO_ON END;o_aux:=nn/64;o_aux:=o_aux mod 2;IF o_aux = 0 THEN o6:=IO_OFF ELSE o6:=IO_ON END END);
  List_Substitution(Implementation(logic_i),moveForward)==(o_IMove_moveForward:=IO_ON;o_IMove_moveForward_linear_6,o_IMove_moveForward_linear_5,o_IMove_moveForward_linear_4,o_IMove_moveForward_linear_3,o_IMove_moveForward_linear_2,o_IMove_moveForward_linear_1,o_IMove_moveForward_linear_0 <-- nat_7_bits_to_bin_7_bits(l_linear));
  List_Substitution(Implementation(logic_i),turn)==(o_IMove_turn:=IO_ON;o_IMove_turn_angular_6,o_IMove_turn_angular_5,o_IMove_turn_angular_4,o_IMove_turn_angular_3,o_IMove_turn_angular_2,o_IMove_turn_angular_1,o_IMove_turn_angular_0 <-- nat_7_bits_to_bin_7_bits(l_angular));
  List_Substitution(Implementation(logic_i),avoid)==(o_IMove_avoid:=IO_ON);
  List_Substitution(Implementation(logic_i),enableCollisionDetection)==(o_IMove_enableCollisionDetection:=IO_ON);
  List_Substitution(Implementation(logic_i),disableCollisionDetection)==(o_IMove_disableCollisionDetection:=IO_ON);
  List_Substitution(Implementation(logic_i),stop)==(o_IObject_stop:=IO_ON);
  List_Substitution(Implementation(logic_i),get_board_0_O1)==(po:=board_0_O1);
  List_Substitution(Implementation(logic_i),get_board_0_O2)==(po:=board_0_O2);
  List_Substitution(Implementation(logic_i),get_board_0_O3)==(po:=board_0_O3);
  List_Substitution(Implementation(logic_i),get_board_0_O4)==(po:=board_0_O4);
  List_Substitution(Implementation(logic_i),get_board_0_O5)==(po:=board_0_O5);
  List_Substitution(Implementation(logic_i),get_board_0_O6)==(po:=board_0_O6);
  List_Substitution(Implementation(logic_i),get_board_0_O7)==(po:=board_0_O7);
  List_Substitution(Implementation(logic_i),get_board_0_O8)==(po:=board_0_O8)
END
&
THEORY ListConstantsX IS
  List_Valuable_Constants(Implementation(logic_i))==(?);
  Inherited_List_Constants(Implementation(logic_i))==(?);
  List_Constants(Implementation(logic_i))==(?)
END
&
THEORY ListSetsX IS
  Set_Definition(Implementation(logic_i),STATE)==({INIT,EXEC_1,EXEC_2,EXEC_3,FINAL});
  Context_List_Enumerated(Implementation(logic_i))==(STATE);
  Context_List_Defered(Implementation(logic_i))==(?);
  Context_List_Sets(Implementation(logic_i))==(STATE);
  List_Own_Enumerated(Implementation(logic_i))==(?);
  List_Valuable_Sets(Implementation(logic_i))==(?);
  Inherited_List_Enumerated(Implementation(logic_i))==(?);
  Inherited_List_Defered(Implementation(logic_i))==(?);
  Inherited_List_Sets(Implementation(logic_i))==(?);
  List_Enumerated(Implementation(logic_i))==(?);
  List_Defered(Implementation(logic_i))==(?);
  List_Sets(Implementation(logic_i))==(?)
END
&
THEORY ListHiddenConstantsX IS
  Abstract_List_HiddenConstants(Implementation(logic_i))==(?);
  Expanded_List_HiddenConstants(Implementation(logic_i))==(?);
  List_HiddenConstants(Implementation(logic_i))==(?);
  External_List_HiddenConstants(Implementation(logic_i))==(?)
END
&
THEORY ListPropertiesX IS
  Abstract_List_Properties(Implementation(logic_i))==(btrue);
  Context_List_Properties(Implementation(logic_i))==(uint32_t = 0..4294967295 & uint16_t = 0..65535 & uint8_t = 0..255 & STRUE: uint8_t & SFALSE: uint8_t & MAX_UINT32: uint32_t & MAX_UINT16: uint16_t & MAX_UINT8: uint8_t & STRUE: 0..MAX_UINT8 & SFALSE: 0..MAX_UINT8 & STRUE/=SFALSE & SBOOL = {STRUE,SFALSE} & STRUE<=2 & SFALSE<=2 & MAX_UINT32 = 4294967295 & MAX_UINT16 = 65535 & MAX_UINT8 = 255 & Convert_Bool = {TRUE|->STRUE,FALSE|->SFALSE} & bitwise_sll_uint32: uint32_t*uint8_t --> uint32_t & bitwise_srl_uint32: uint32_t*uint8_t --> uint32_t & bitwise_not_uint32: uint32_t --> uint32_t & bitwise_and_uint32: uint32_t*uint32_t --> uint32_t & bitwise_xor_uint32: uint32_t*uint32_t --> uint32_t & bitwise_or_uint32: uint32_t*uint32_t --> uint32_t & bitwise_sll_uint16: uint16_t*uint8_t --> uint16_t & bitwise_srl_uint16: uint16_t*uint8_t --> uint16_t & bitwise_not_uint16: uint16_t --> uint16_t & bitwise_and_uint16: uint16_t*uint16_t --> uint16_t & bitwise_xor_uint16: uint16_t*uint16_t --> uint16_t & bitwise_or_uint16: uint16_t*uint16_t --> uint16_t & bitwise_sll_uint8: uint8_t*uint8_t --> uint8_t & bitwise_srl_uint8: uint8_t*uint8_t --> uint8_t & bitwise_not_uint8: uint8_t --> uint8_t & bitwise_and_uint8: uint8_t*uint8_t --> uint8_t & bitwise_xor_uint8: uint8_t*uint8_t --> uint8_t & bitwise_or_uint8: uint8_t*uint8_t --> uint8_t & add_uint32: uint32_t*uint32_t --> uint32_t & sub_uint32: uint32_t*uint32_t --> uint32_t & mul_uint32: uint32_t*uint32_t --> uint32_t & add_uint16: uint16_t*uint16_t --> uint16_t & sub_uint16: uint16_t*uint16_t --> uint16_t & mul_uint16: uint16_t*uint16_t --> uint16_t & add_uint8: uint8_t*uint8_t --> uint8_t & sub_uint8: uint8_t*uint8_t --> uint8_t & mul_uint8: uint8_t*uint8_t --> uint8_t & bitwise_sll_uint32 = %(x1,x2).(x1: uint32_t & x2: uint8_t | x1*2**x2 mod (MAX_UINT32+1)) & bitwise_sll_uint16 = %(x1,x2).(x1: uint16_t & x2: uint8_t | x1*2**x2 mod (MAX_UINT16+1)) & bitwise_sll_uint8 = %(x1,x2).(x1: uint8_t & x2: uint8_t | x1*2**x2 mod (MAX_UINT8+1)) & bitwise_srl_uint32 = %(x1,x2).(x1: uint32_t & x2: uint8_t | x1/2**x2) & bitwise_srl_uint16 = %(x1,x2).(x1: uint16_t & x2: uint8_t | x1/2**x2) & bitwise_srl_uint8 = %(x1,x2).(x1: uint8_t & x2: uint8_t | x1/2**x2) & add_uint32 = %(x1,x2).(x1: uint32_t & x2: uint32_t | (x1+x2) mod (MAX_UINT32+1)) & sub_uint32 = %(x1,x2).(x1: uint32_t & x2: uint32_t | (x1-x2+MAX_UINT32+1) mod (MAX_UINT32+1)) & mul_uint32 = %(x1,x2).(x1: uint32_t & x2: uint32_t | x1*x2 mod (MAX_UINT32+1)) & add_uint16 = %(y1,y2).(y1: uint16_t & y2: uint16_t | (y1+y2) mod (MAX_UINT16+1)) & sub_uint16 = %(y1,y2).(y1: uint16_t & y2: uint16_t | (y1-y2+MAX_UINT16+1) mod (MAX_UINT16+1)) & mul_uint16 = %(y1,y2).(y1: uint16_t & y2: uint16_t | y1*y2 mod (MAX_UINT16+1)) & add_uint8 = %(y1,y2).(y1: uint8_t & y2: uint8_t | (y1+y2) mod (MAX_UINT8+1)) & sub_uint8 = %(y1,y2).(y1: uint8_t & y2: uint8_t | (y1-y2+MAX_UINT8+1) mod (MAX_UINT8+1)) & mul_uint8 = %(y1,y2).(y1: uint8_t & y2: uint8_t | y1*y2 mod (MAX_UINT8+1)) & !(ui1,ui2).(ui1: uint16_t & ui2: uint16_t => bitwise_and_uint16(ui1|->ui2)<=ui2) & !(ui1,ui2).(ui1: uint32_t & ui2: uint32_t => bitwise_and_uint32(ui1|->ui2)<=ui2) & TIME = uint32_t & IO_STATE = uint8_t & IO_ON: uint8_t & IO_OFF: uint8_t & IO_ON/=IO_OFF & IO_ON: IO_STATE & IO_OFF: IO_STATE & mbc_board_id: uint8_t & OP_IMove_moveForward: uint8_t & OP_IMove_turn: uint8_t & OP_IMove_avoid_enableCollisionDetection_disableCollisionDetection: uint8_t & max_board_output: uint8_t & SimSquare_cycle_def: uint32_t & linear: uint32_t & angular: uint32_t & linear: 0..max_board_output & angular: 0..max_board_output & STATE: FIN(INTEGER) & not(STATE = {}));
  Inherited_List_Properties(Implementation(logic_i))==(btrue);
  List_Properties(Implementation(logic_i))==(btrue)
END
&
THEORY ListValuesX IS
  Values_Subs(Implementation(logic_i))==(aa: aa);
  List_Values(Implementation(logic_i))==(?)
END
&
THEORY ListSeenInfoX IS
  Seen_Internal_List_Operations(Implementation(logic_i),Machine(inputs))==(read_inputs,get_board_0_I1,get_board_0_I2,get_board_0_I3,get_board_0_I4,get_board_0_I5,get_board_0_I6,get_board_0_I7,get_board_0_I8,get_board_0_I9,get_board_0_I10,get_board_0_I11,get_board_0_I12,get_board_0_I13,get_board_0_I14,get_board_0_I15,get_board_0_I16,get_board_0_I17,get_board_0_I18,get_board_0_I19,get_board_0_I20);
  Seen_Context_List_Enumerated(Implementation(logic_i))==(?);
  Seen_Context_List_Invariant(Implementation(logic_i))==(btrue);
  Seen_Context_List_Assertions(Implementation(logic_i))==(Convert_Bool: BOOL +-> uint8_t & Convert_Bool: BOOL +-> uint16_t & Convert_Bool: BOOL +-> uint32_t);
  Seen_Context_List_Properties(Implementation(logic_i))==(uint32_t = 0..4294967295 & uint16_t = 0..65535 & uint8_t = 0..255 & STRUE: uint8_t & SFALSE: uint8_t & MAX_UINT32: uint32_t & MAX_UINT16: uint16_t & MAX_UINT8: uint8_t & STRUE: 0..MAX_UINT8 & SFALSE: 0..MAX_UINT8 & STRUE/=SFALSE & SBOOL = {STRUE,SFALSE} & STRUE<=2 & SFALSE<=2 & MAX_UINT32 = 4294967295 & MAX_UINT16 = 65535 & MAX_UINT8 = 255 & Convert_Bool = {TRUE|->STRUE,FALSE|->SFALSE} & MAX_NB_MODULES: uint8_t & MAX_NB_INPUTS: uint8_t & MAX_NB_OUTPUTS: uint8_t & MAX_NB_MODULES = 1 & MAX_NB_INPUTS = 20 & MAX_NB_OUTPUTS = 8 & TIME = uint32_t & IO_STATE = uint8_t & IO_ON: uint8_t & IO_OFF: uint8_t & IO_ON/=IO_OFF & IO_ON: IO_STATE & IO_OFF: IO_STATE);
  Seen_List_Constraints(Implementation(logic_i))==(btrue);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I20)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I20)==(po:=board_0_I20);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I19)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I19)==(po:=board_0_I19);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I18)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I18)==(po:=board_0_I18);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I17)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I17)==(po:=board_0_I17);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I16)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I16)==(po:=board_0_I16);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I15)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I15)==(po:=board_0_I15);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I14)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I14)==(po:=board_0_I14);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I13)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I13)==(po:=board_0_I13);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I12)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I12)==(po:=board_0_I12);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I11)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I11)==(po:=board_0_I11);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I10)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I10)==(po:=board_0_I10);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I9)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I9)==(po:=board_0_I9);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I8)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I8)==(po:=board_0_I8);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I7)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I7)==(po:=board_0_I7);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I6)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I6)==(po:=board_0_I6);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I5)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I5)==(po:=board_0_I5);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I4)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I4)==(po:=board_0_I4);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I3)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I3)==(po:=board_0_I3);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I2)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I2)==(po:=board_0_I2);
  Seen_List_Precondition(Implementation(logic_i),get_board_0_I1)==(po: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_board_0_I1)==(po:=board_0_I1);
  Seen_List_Precondition(Implementation(logic_i),read_inputs)==(btrue);
  Seen_Expanded_List_Substitution(Implementation(logic_i),read_inputs)==(@(board_0_I1$0).(board_0_I1$0: uint8_t ==> board_0_I1:=board_0_I1$0) || @(board_0_I2$0).(board_0_I2$0: uint8_t ==> board_0_I2:=board_0_I2$0) || @(board_0_I3$0).(board_0_I3$0: uint8_t ==> board_0_I3:=board_0_I3$0) || @(board_0_I4$0).(board_0_I4$0: uint8_t ==> board_0_I4:=board_0_I4$0) || @(board_0_I5$0).(board_0_I5$0: uint8_t ==> board_0_I5:=board_0_I5$0) || @(board_0_I6$0).(board_0_I6$0: uint8_t ==> board_0_I6:=board_0_I6$0) || @(board_0_I7$0).(board_0_I7$0: uint8_t ==> board_0_I7:=board_0_I7$0) || @(board_0_I8$0).(board_0_I8$0: uint8_t ==> board_0_I8:=board_0_I8$0) || @(board_0_I9$0).(board_0_I9$0: uint8_t ==> board_0_I9:=board_0_I9$0) || @(board_0_I10$0).(board_0_I10$0: uint8_t ==> board_0_I10:=board_0_I10$0) || @(board_0_I11$0).(board_0_I11$0: uint8_t ==> board_0_I11:=board_0_I11$0) || @(board_0_I12$0).(board_0_I12$0: uint8_t ==> board_0_I12:=board_0_I12$0) || @(board_0_I13$0).(board_0_I13$0: uint8_t ==> board_0_I13:=board_0_I13$0) || @(board_0_I14$0).(board_0_I14$0: uint8_t ==> board_0_I14:=board_0_I14$0) || @(board_0_I15$0).(board_0_I15$0: uint8_t ==> board_0_I15:=board_0_I15$0) || @(board_0_I16$0).(board_0_I16$0: uint8_t ==> board_0_I16:=board_0_I16$0) || @(board_0_I17$0).(board_0_I17$0: uint8_t ==> board_0_I17:=board_0_I17$0) || @(board_0_I18$0).(board_0_I18$0: uint8_t ==> board_0_I18:=board_0_I18$0) || @(board_0_I19$0).(board_0_I19$0: uint8_t ==> board_0_I19:=board_0_I19$0) || @(board_0_I20$0).(board_0_I20$0: uint8_t ==> board_0_I20:=board_0_I20$0));
  Seen_List_Operations(Implementation(logic_i),Machine(inputs))==(read_inputs,get_board_0_I1,get_board_0_I2,get_board_0_I3,get_board_0_I4,get_board_0_I5,get_board_0_I6,get_board_0_I7,get_board_0_I8,get_board_0_I9,get_board_0_I10,get_board_0_I11,get_board_0_I12,get_board_0_I13,get_board_0_I14,get_board_0_I15,get_board_0_I16,get_board_0_I17,get_board_0_I18,get_board_0_I19,get_board_0_I20);
  Seen_Expanded_List_Invariant(Implementation(logic_i),Machine(inputs))==(btrue);
  Seen_Internal_List_Operations(Implementation(logic_i),Machine(user_ctx))==(?);
  Seen_List_Operations(Implementation(logic_i),Machine(user_ctx))==(?);
  Seen_Expanded_List_Invariant(Implementation(logic_i),Machine(user_ctx))==(btrue);
  Seen_Internal_List_Operations(Implementation(logic_i),Machine(lchip_interface))==(print_global_inputs,read_global_input,write_global_output,get_replica_id,get_processor_id,get_ms_tick,print_uint8);
  Seen_List_Precondition(Implementation(logic_i),print_uint8)==(tag: uint8_t & value: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),print_uint8)==(skip);
  Seen_List_Precondition(Implementation(logic_i),get_ms_tick)==(out: uint32_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_ms_tick)==(out:=ms_tick);
  Seen_List_Precondition(Implementation(logic_i),get_processor_id)==(out: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_processor_id)==(@(out$0).(out$0: uint8_t ==> out:=out$0));
  Seen_List_Precondition(Implementation(logic_i),get_replica_id)==(out: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),get_replica_id)==(@(out$0).(out$0: uint8_t ==> out:=out$0));
  Seen_List_Precondition(Implementation(logic_i),write_global_output)==(output_id: uint8_t & output_id<MAX_NB_OUTPUTS & state: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),write_global_output)==(skip);
  Seen_List_Precondition(Implementation(logic_i),read_global_input)==(input_id: uint8_t & input_id<MAX_NB_INPUTS & state: uint8_t);
  Seen_Expanded_List_Substitution(Implementation(logic_i),read_global_input)==(@(state$1).(state$1: uint8_t & (state$1 = IO_ON or state$1 = IO_OFF) ==> state:=state$1));
  Seen_List_Precondition(Implementation(logic_i),print_global_inputs)==(btrue);
  Seen_Expanded_List_Substitution(Implementation(logic_i),print_global_inputs)==(skip);
  Seen_List_Operations(Implementation(logic_i),Machine(lchip_interface))==(print_global_inputs,read_global_input,write_global_output,get_replica_id,get_processor_id,get_ms_tick,print_uint8);
  Seen_Expanded_List_Invariant(Implementation(logic_i),Machine(lchip_interface))==(btrue);
  Seen_Internal_List_Operations(Implementation(logic_i),Machine(io_constants))==(?);
  Seen_List_Operations(Implementation(logic_i),Machine(io_constants))==(?);
  Seen_Expanded_List_Invariant(Implementation(logic_i),Machine(io_constants))==(btrue);
  Seen_Internal_List_Operations(Implementation(logic_i),Machine(g_operators))==(?);
  Seen_List_Operations(Implementation(logic_i),Machine(g_operators))==(?);
  Seen_Expanded_List_Invariant(Implementation(logic_i),Machine(g_operators))==(btrue);
  Seen_Internal_List_Operations(Implementation(logic_i),Machine(g_types))==(?);
  Seen_List_Operations(Implementation(logic_i),Machine(g_types))==(?);
  Seen_Expanded_List_Invariant(Implementation(logic_i),Machine(g_types))==(btrue)
END
&
THEORY ListIncludedOperationsX IS
  List_Included_Operations(Implementation(logic_i),Machine(inputs))==(read_inputs,get_board_0_I1,get_board_0_I2,get_board_0_I3,get_board_0_I4,get_board_0_I5,get_board_0_I6,get_board_0_I7,get_board_0_I8,get_board_0_I9,get_board_0_I10,get_board_0_I11,get_board_0_I12,get_board_0_I13,get_board_0_I14,get_board_0_I15,get_board_0_I16,get_board_0_I17,get_board_0_I18,get_board_0_I19,get_board_0_I20);
  List_Included_Operations(Implementation(logic_i),Machine(lchip_interface))==(print_global_inputs,read_global_input,write_global_output,get_replica_id,get_processor_id,get_ms_tick,print_uint8)
END
&
THEORY InheritedEnvX IS
  VisibleVariables(Implementation(logic_i))==(Type(board_0_O1) == Mvv(btype(INTEGER,?,?));Type(board_0_O2) == Mvv(btype(INTEGER,?,?));Type(board_0_O3) == Mvv(btype(INTEGER,?,?));Type(board_0_O4) == Mvv(btype(INTEGER,?,?));Type(board_0_O5) == Mvv(btype(INTEGER,?,?));Type(board_0_O6) == Mvv(btype(INTEGER,?,?));Type(board_0_O7) == Mvv(btype(INTEGER,?,?));Type(board_0_O8) == Mvv(btype(INTEGER,?,?));Type(current_time) == Mvv(btype(INTEGER,?,?));Type(my_clock) == Mvv(btype(INTEGER,?,?));Type(smstate) == Mvv(etype(STATE,?,?));Type(first_time) == Mvv(btype(BOOL,?,?));Type(SimSquare_cycle_timer) == Mvv(btype(INTEGER,?,?));Type(C_) == Mvv(btype(INTEGER,?,?));Type(D_) == Mvv(btype(INTEGER,?,?));Type(segment) == Mvv(btype(INTEGER,?,?));Type(DTurning_clock) == Mvv(btype(INTEGER,?,?));Type(i_IObject_collisionDetected) == Mvv(btype(INTEGER,?,?));Type(o_IMove_moveForward) == Mvv(btype(INTEGER,?,?));Type(o_IMove_moveForward_linear_0) == Mvv(btype(INTEGER,?,?));Type(o_IMove_moveForward_linear_1) == Mvv(btype(INTEGER,?,?));Type(o_IMove_moveForward_linear_2) == Mvv(btype(INTEGER,?,?));Type(o_IMove_moveForward_linear_3) == Mvv(btype(INTEGER,?,?));Type(o_IMove_moveForward_linear_4) == Mvv(btype(INTEGER,?,?));Type(o_IMove_moveForward_linear_5) == Mvv(btype(INTEGER,?,?));Type(o_IMove_moveForward_linear_6) == Mvv(btype(INTEGER,?,?));Type(o_IMove_turn) == Mvv(btype(INTEGER,?,?));Type(o_IMove_turn_angular_0) == Mvv(btype(INTEGER,?,?));Type(o_IMove_turn_angular_1) == Mvv(btype(INTEGER,?,?));Type(o_IMove_turn_angular_2) == Mvv(btype(INTEGER,?,?));Type(o_IMove_turn_angular_3) == Mvv(btype(INTEGER,?,?));Type(o_IMove_turn_angular_4) == Mvv(btype(INTEGER,?,?));Type(o_IMove_turn_angular_5) == Mvv(btype(INTEGER,?,?));Type(o_IMove_turn_angular_6) == Mvv(btype(INTEGER,?,?));Type(o_IMove_avoid) == Mvv(btype(INTEGER,?,?));Type(o_IMove_enableCollisionDetection) == Mvv(btype(INTEGER,?,?));Type(o_IMove_disableCollisionDetection) == Mvv(btype(INTEGER,?,?));Type(o_IObject_stop) == Mvv(btype(INTEGER,?,?)));
  Operations(Implementation(logic_i))==(Type(get_board_0_O8) == Cst(btype(INTEGER,?,?),No_type);Type(get_board_0_O7) == Cst(btype(INTEGER,?,?),No_type);Type(get_board_0_O6) == Cst(btype(INTEGER,?,?),No_type);Type(get_board_0_O5) == Cst(btype(INTEGER,?,?),No_type);Type(get_board_0_O4) == Cst(btype(INTEGER,?,?),No_type);Type(get_board_0_O3) == Cst(btype(INTEGER,?,?),No_type);Type(get_board_0_O2) == Cst(btype(INTEGER,?,?),No_type);Type(get_board_0_O1) == Cst(btype(INTEGER,?,?),No_type);Type(user_logic) == Cst(No_type,No_type))
END
&
THEORY ListVisibleStaticX IS
  List_Constants(Implementation(logic_i),Machine(user_ctx))==(mbc_board_id,OP_IMove_moveForward,OP_IMove_turn,OP_IMove_avoid_enableCollisionDetection_disableCollisionDetection,max_board_output,SimSquare_cycle_def,linear,angular);
  List_Constants_Env(Implementation(logic_i),Machine(user_ctx))==(Type(INIT) == Cst(etype(STATE,0,4));Type(EXEC_1) == Cst(etype(STATE,0,4));Type(EXEC_2) == Cst(etype(STATE,0,4));Type(EXEC_3) == Cst(etype(STATE,0,4));Type(FINAL) == Cst(etype(STATE,0,4));Type(mbc_board_id) == Cst(btype(INTEGER,?,?));Type(OP_IMove_moveForward) == Cst(btype(INTEGER,?,?));Type(OP_IMove_turn) == Cst(btype(INTEGER,?,?));Type(OP_IMove_avoid_enableCollisionDetection_disableCollisionDetection) == Cst(btype(INTEGER,?,?));Type(max_board_output) == Cst(btype(INTEGER,?,?));Type(SimSquare_cycle_def) == Cst(btype(INTEGER,?,?));Type(linear) == Cst(btype(INTEGER,?,?));Type(angular) == Cst(btype(INTEGER,?,?)));
  Enumerate_Definition(Implementation(logic_i),Machine(user_ctx),STATE)==({INIT,EXEC_1,EXEC_2,EXEC_3,FINAL});
  List_Constants(Implementation(logic_i),Machine(io_constants))==(IO_ON,IO_OFF);
  List_Constants_Env(Implementation(logic_i),Machine(io_constants))==(Type(IO_ON) == Cst(btype(INTEGER,?,?));Type(IO_OFF) == Cst(btype(INTEGER,?,?)));
  List_Constants(Implementation(logic_i),Machine(g_operators))==(bitwise_sll_uint32,bitwise_srl_uint32,bitwise_not_uint32,bitwise_and_uint32,bitwise_xor_uint32,bitwise_or_uint32,bitwise_sll_uint16,bitwise_srl_uint16,bitwise_not_uint16,bitwise_and_uint16,bitwise_xor_uint16,bitwise_or_uint16,bitwise_sll_uint8,bitwise_srl_uint8,bitwise_not_uint8,bitwise_and_uint8,bitwise_xor_uint8,bitwise_or_uint8,add_uint32,sub_uint32,mul_uint32,add_uint16,sub_uint16,mul_uint16,add_uint8,sub_uint8,mul_uint8);
  List_Constants_Env(Implementation(logic_i),Machine(g_operators))==(Type(bitwise_sll_uint32) == Cst(SetOf(btype(INTEGER,"[uint32_t","]uint32_t")*btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint32_t","]uint32_t")));Type(bitwise_srl_uint32) == Cst(SetOf(btype(INTEGER,"[uint32_t","]uint32_t")*btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint32_t","]uint32_t")));Type(bitwise_not_uint32) == Cst(SetOf(btype(INTEGER,"[uint32_t","]uint32_t")*btype(INTEGER,"[uint32_t","]uint32_t")));Type(bitwise_and_uint32) == Cst(SetOf(btype(INTEGER,"[uint32_t","]uint32_t")*btype(INTEGER,"[uint32_t","]uint32_t")*btype(INTEGER,"[uint32_t","]uint32_t")));Type(bitwise_xor_uint32) == Cst(SetOf(btype(INTEGER,"[uint32_t","]uint32_t")*btype(INTEGER,"[uint32_t","]uint32_t")*btype(INTEGER,"[uint32_t","]uint32_t")));Type(bitwise_or_uint32) == Cst(SetOf(btype(INTEGER,"[uint32_t","]uint32_t")*btype(INTEGER,"[uint32_t","]uint32_t")*btype(INTEGER,"[uint32_t","]uint32_t")));Type(bitwise_sll_uint16) == Cst(SetOf(btype(INTEGER,"[uint16_t","]uint16_t")*btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint16_t","]uint16_t")));Type(bitwise_srl_uint16) == Cst(SetOf(btype(INTEGER,"[uint16_t","]uint16_t")*btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint16_t","]uint16_t")));Type(bitwise_not_uint16) == Cst(SetOf(btype(INTEGER,"[uint16_t","]uint16_t")*btype(INTEGER,"[uint16_t","]uint16_t")));Type(bitwise_and_uint16) == Cst(SetOf(btype(INTEGER,"[uint16_t","]uint16_t")*btype(INTEGER,"[uint16_t","]uint16_t")*btype(INTEGER,"[uint16_t","]uint16_t")));Type(bitwise_xor_uint16) == Cst(SetOf(btype(INTEGER,"[uint16_t","]uint16_t")*btype(INTEGER,"[uint16_t","]uint16_t")*btype(INTEGER,"[uint16_t","]uint16_t")));Type(bitwise_or_uint16) == Cst(SetOf(btype(INTEGER,"[uint16_t","]uint16_t")*btype(INTEGER,"[uint16_t","]uint16_t")*btype(INTEGER,"[uint16_t","]uint16_t")));Type(bitwise_sll_uint8) == Cst(SetOf(btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t")));Type(bitwise_srl_uint8) == Cst(SetOf(btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t")));Type(bitwise_not_uint8) == Cst(SetOf(btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t")));Type(bitwise_and_uint8) == Cst(SetOf(btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t")));Type(bitwise_xor_uint8) == Cst(SetOf(btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t")));Type(bitwise_or_uint8) == Cst(SetOf(btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t")));Type(add_uint32) == Cst(SetOf(btype(INTEGER,"[uint32_t","]uint32_t")*btype(INTEGER,"[uint32_t","]uint32_t")*btype(INTEGER,"[uint32_t","]uint32_t")));Type(sub_uint32) == Cst(SetOf(btype(INTEGER,"[uint32_t","]uint32_t")*btype(INTEGER,"[uint32_t","]uint32_t")*btype(INTEGER,"[uint32_t","]uint32_t")));Type(mul_uint32) == Cst(SetOf(btype(INTEGER,"[uint32_t","]uint32_t")*btype(INTEGER,"[uint32_t","]uint32_t")*btype(INTEGER,"[uint32_t","]uint32_t")));Type(add_uint16) == Cst(SetOf(btype(INTEGER,"[uint16_t","]uint16_t")*btype(INTEGER,"[uint16_t","]uint16_t")*btype(INTEGER,"[uint16_t","]uint16_t")));Type(sub_uint16) == Cst(SetOf(btype(INTEGER,"[uint16_t","]uint16_t")*btype(INTEGER,"[uint16_t","]uint16_t")*btype(INTEGER,"[uint16_t","]uint16_t")));Type(mul_uint16) == Cst(SetOf(btype(INTEGER,"[uint16_t","]uint16_t")*btype(INTEGER,"[uint16_t","]uint16_t")*btype(INTEGER,"[uint16_t","]uint16_t")));Type(add_uint8) == Cst(SetOf(btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t")));Type(sub_uint8) == Cst(SetOf(btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t")));Type(mul_uint8) == Cst(SetOf(btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t")*btype(INTEGER,"[uint8_t","]uint8_t"))));
  List_Constants(Implementation(logic_i),Machine(g_types))==(uint32_t,uint16_t,uint8_t,STRUE,SFALSE,MAX_UINT32,MAX_UINT16,MAX_UINT8);
  List_Constants_Env(Implementation(logic_i),Machine(g_types))==(Type(uint32_t) == Cst(SetOf(btype(INTEGER,"[uint32_t","]uint32_t")));Type(uint16_t) == Cst(SetOf(btype(INTEGER,"[uint16_t","]uint16_t")));Type(uint8_t) == Cst(SetOf(btype(INTEGER,"[uint8_t","]uint8_t")));Type(STRUE) == Cst(btype(INTEGER,?,?));Type(SFALSE) == Cst(btype(INTEGER,?,?));Type(MAX_UINT32) == Cst(btype(INTEGER,?,?));Type(MAX_UINT16) == Cst(btype(INTEGER,?,?));Type(MAX_UINT8) == Cst(btype(INTEGER,?,?)))
END
&
THEORY ListOfIdsX IS
  List_Of_Ids(Implementation(logic_i)) == (? | ? | ? | ? | user_logic,read_master_clock,execute_model_cycle,since,land,lor,lnot,write_output,reset_cycle_timers,reset_outputs,read_model_inputs,write_model_outputs,state_machine,branching_condition_1,nat_7_bits_to_bin_7_bits,moveForward,turn,avoid,enableCollisionDetection,disableCollisionDetection,stop,get_board_0_O1,get_board_0_O2,get_board_0_O3,get_board_0_O4,get_board_0_O5,get_board_0_O6,get_board_0_O7,get_board_0_O8,refinement_of_stop,refinement_of_disableCollisionDetection,refinement_of_enableCollisionDetection,refinement_of_avoid,refinement_of_turn,refinement_of_moveForward,refinement_of_nat_7_bits_to_bin_7_bits,refinement_of_branching_condition_1,refinement_of_state_machine,refinement_of_write_model_outputs,refinement_of_read_model_inputs,refinement_of_reset_outputs,refinement_of_reset_cycle_timers,refinement_of_write_output,refinement_of_lnot,refinement_of_lor,refinement_of_land,refinement_of_since,refinement_of_execute_model_cycle,refinement_of_read_master_clock | ? | seen(Machine(g_types)),seen(Machine(g_operators)),seen(Machine(io_constants)),seen(Machine(lchip_interface)),seen(Machine(user_ctx)),seen(Machine(inputs)) | ? | logic_i);
  List_Of_HiddenCst_Ids(Implementation(logic_i)) == (? | ?);
  List_Of_VisibleCst_Ids(Implementation(logic_i)) == (?);
  List_Of_VisibleVar_Ids(Implementation(logic_i)) == (o_IObject_stop,o_IMove_disableCollisionDetection,o_IMove_enableCollisionDetection,o_IMove_avoid,o_IMove_turn_angular_6,o_IMove_turn_angular_5,o_IMove_turn_angular_4,o_IMove_turn_angular_3,o_IMove_turn_angular_2,o_IMove_turn_angular_1,o_IMove_turn_angular_0,o_IMove_turn,o_IMove_moveForward_linear_6,o_IMove_moveForward_linear_5,o_IMove_moveForward_linear_4,o_IMove_moveForward_linear_3,o_IMove_moveForward_linear_2,o_IMove_moveForward_linear_1,o_IMove_moveForward_linear_0,o_IMove_moveForward,i_IObject_collisionDetected,DTurning_clock,segment,D_,C_,SimSquare_cycle_timer,first_time,smstate,my_clock,current_time,board_0_O8,board_0_O7,board_0_O6,board_0_O5,board_0_O4,board_0_O3,board_0_O2,board_0_O1 | ?);
  List_Of_Ids_SeenBNU(Implementation(logic_i)) == (?: ?);
  List_Of_Ids(Machine(inputs)) == (? | ? | board_0_I20,board_0_I19,board_0_I18,board_0_I17,board_0_I16,board_0_I15,board_0_I14,board_0_I13,board_0_I12,board_0_I11,board_0_I10,board_0_I9,board_0_I8,board_0_I7,board_0_I6,board_0_I5,board_0_I4,board_0_I3,board_0_I2,board_0_I1 | ? | read_inputs,get_board_0_I1,get_board_0_I2,get_board_0_I3,get_board_0_I4,get_board_0_I5,get_board_0_I6,get_board_0_I7,get_board_0_I8,get_board_0_I9,get_board_0_I10,get_board_0_I11,get_board_0_I12,get_board_0_I13,get_board_0_I14,get_board_0_I15,get_board_0_I16,get_board_0_I17,get_board_0_I18,get_board_0_I19,get_board_0_I20 | ? | seen(Machine(g_types)) | ? | inputs);
  List_Of_HiddenCst_Ids(Machine(inputs)) == (? | ?);
  List_Of_VisibleCst_Ids(Machine(inputs)) == (?);
  List_Of_VisibleVar_Ids(Machine(inputs)) == (? | ?);
  List_Of_Ids_SeenBNU(Machine(inputs)) == (?: ?);
  List_Of_Ids(Machine(g_types)) == (uint32_t,uint16_t,uint8_t,STRUE,SFALSE,MAX_UINT32,MAX_UINT16,MAX_UINT8 | ? | ? | ? | ? | ? | ? | ? | g_types);
  List_Of_HiddenCst_Ids(Machine(g_types)) == (SBOOL,Convert_Bool | ?);
  List_Of_VisibleCst_Ids(Machine(g_types)) == (uint32_t,uint16_t,uint8_t,STRUE,SFALSE,MAX_UINT32,MAX_UINT16,MAX_UINT8);
  List_Of_VisibleVar_Ids(Machine(g_types)) == (? | ?);
  List_Of_Ids_SeenBNU(Machine(g_types)) == (?: ?);
  List_Of_Ids(Machine(user_ctx)) == (mbc_board_id,OP_IMove_moveForward,OP_IMove_turn,OP_IMove_avoid_enableCollisionDetection_disableCollisionDetection,max_board_output,SimSquare_cycle_def,linear,angular,STATE,INIT,EXEC_1,EXEC_2,EXEC_3,FINAL | ? | ? | ? | ? | ? | seen(Machine(g_types)) | ? | user_ctx);
  List_Of_HiddenCst_Ids(Machine(user_ctx)) == (? | ?);
  List_Of_VisibleCst_Ids(Machine(user_ctx)) == (mbc_board_id,OP_IMove_moveForward,OP_IMove_turn,OP_IMove_avoid_enableCollisionDetection_disableCollisionDetection,max_board_output,SimSquare_cycle_def,linear,angular);
  List_Of_VisibleVar_Ids(Machine(user_ctx)) == (? | ?);
  List_Of_Ids_SeenBNU(Machine(user_ctx)) == (?: ?);
  List_Of_Ids(Machine(lchip_interface)) == (? | ? | ms_tick | ? | print_global_inputs,read_global_input,write_global_output,get_replica_id,get_processor_id,get_ms_tick,print_uint8 | ? | seen(Machine(g_types)),seen(Machine(lchip_configuration)),seen(Machine(io_constants)) | ? | lchip_interface);
  List_Of_HiddenCst_Ids(Machine(lchip_interface)) == (? | ?);
  List_Of_VisibleCst_Ids(Machine(lchip_interface)) == (?);
  List_Of_VisibleVar_Ids(Machine(lchip_interface)) == (? | ?);
  List_Of_Ids_SeenBNU(Machine(lchip_interface)) == (?: ?);
  List_Of_Ids(Machine(io_constants)) == (IO_ON,IO_OFF | ? | ? | ? | ? | ? | seen(Machine(g_types)) | ? | io_constants);
  List_Of_HiddenCst_Ids(Machine(io_constants)) == (IO_STATE,TIME | ?);
  List_Of_VisibleCst_Ids(Machine(io_constants)) == (IO_ON,IO_OFF);
  List_Of_VisibleVar_Ids(Machine(io_constants)) == (? | ?);
  List_Of_Ids_SeenBNU(Machine(io_constants)) == (?: ?);
  List_Of_Ids(Machine(lchip_configuration)) == (MAX_NB_MODULES,MAX_NB_INPUTS,MAX_NB_OUTPUTS | ? | ? | ? | ? | ? | seen(Machine(g_types)) | ? | lchip_configuration);
  List_Of_HiddenCst_Ids(Machine(lchip_configuration)) == (? | ?);
  List_Of_VisibleCst_Ids(Machine(lchip_configuration)) == (MAX_NB_MODULES,MAX_NB_INPUTS,MAX_NB_OUTPUTS);
  List_Of_VisibleVar_Ids(Machine(lchip_configuration)) == (? | ?);
  List_Of_Ids_SeenBNU(Machine(lchip_configuration)) == (?: ?);
  List_Of_Ids(Machine(g_operators)) == (bitwise_sll_uint32,bitwise_srl_uint32,bitwise_not_uint32,bitwise_and_uint32,bitwise_xor_uint32,bitwise_or_uint32,bitwise_sll_uint16,bitwise_srl_uint16,bitwise_not_uint16,bitwise_and_uint16,bitwise_xor_uint16,bitwise_or_uint16,bitwise_sll_uint8,bitwise_srl_uint8,bitwise_not_uint8,bitwise_and_uint8,bitwise_xor_uint8,bitwise_or_uint8,add_uint32,sub_uint32,mul_uint32,add_uint16,sub_uint16,mul_uint16,add_uint8,sub_uint8,mul_uint8 | ? | ? | ? | ? | ? | seen(Machine(g_types)) | ? | g_operators);
  List_Of_HiddenCst_Ids(Machine(g_operators)) == (? | ?);
  List_Of_VisibleCst_Ids(Machine(g_operators)) == (bitwise_sll_uint32,bitwise_srl_uint32,bitwise_not_uint32,bitwise_and_uint32,bitwise_xor_uint32,bitwise_or_uint32,bitwise_sll_uint16,bitwise_srl_uint16,bitwise_not_uint16,bitwise_and_uint16,bitwise_xor_uint16,bitwise_or_uint16,bitwise_sll_uint8,bitwise_srl_uint8,bitwise_not_uint8,bitwise_and_uint8,bitwise_xor_uint8,bitwise_or_uint8,add_uint32,sub_uint32,mul_uint32,add_uint16,sub_uint16,mul_uint16,add_uint8,sub_uint8,mul_uint8);
  List_Of_VisibleVar_Ids(Machine(g_operators)) == (? | ?);
  List_Of_Ids_SeenBNU(Machine(g_operators)) == (?: ?)
END
&
THEORY VisibleVariablesEnvX IS
  VisibleVariables(Implementation(logic_i)) == (Type(o_IObject_stop) == Mvv(btype(INTEGER,?,?));Type(o_IMove_disableCollisionDetection) == Mvv(btype(INTEGER,?,?));Type(o_IMove_enableCollisionDetection) == Mvv(btype(INTEGER,?,?));Type(o_IMove_avoid) == Mvv(btype(INTEGER,?,?));Type(o_IMove_turn_angular_6) == Mvv(btype(INTEGER,?,?));Type(o_IMove_turn_angular_5) == Mvv(btype(INTEGER,?,?));Type(o_IMove_turn_angular_4) == Mvv(btype(INTEGER,?,?));Type(o_IMove_turn_angular_3) == Mvv(btype(INTEGER,?,?));Type(o_IMove_turn_angular_2) == Mvv(btype(INTEGER,?,?));Type(o_IMove_turn_angular_1) == Mvv(btype(INTEGER,?,?));Type(o_IMove_turn_angular_0) == Mvv(btype(INTEGER,?,?));Type(o_IMove_turn) == Mvv(btype(INTEGER,?,?));Type(o_IMove_moveForward_linear_6) == Mvv(btype(INTEGER,?,?));Type(o_IMove_moveForward_linear_5) == Mvv(btype(INTEGER,?,?));Type(o_IMove_moveForward_linear_4) == Mvv(btype(INTEGER,?,?));Type(o_IMove_moveForward_linear_3) == Mvv(btype(INTEGER,?,?));Type(o_IMove_moveForward_linear_2) == Mvv(btype(INTEGER,?,?));Type(o_IMove_moveForward_linear_1) == Mvv(btype(INTEGER,?,?));Type(o_IMove_moveForward_linear_0) == Mvv(btype(INTEGER,?,?));Type(o_IMove_moveForward) == Mvv(btype(INTEGER,?,?));Type(i_IObject_collisionDetected) == Mvv(btype(INTEGER,?,?));Type(DTurning_clock) == Mvv(btype(INTEGER,?,?));Type(segment) == Mvv(btype(INTEGER,?,?));Type(D_) == Mvv(btype(INTEGER,?,?));Type(C_) == Mvv(btype(INTEGER,?,?));Type(SimSquare_cycle_timer) == Mvv(btype(INTEGER,?,?));Type(first_time) == Mvv(btype(BOOL,?,?));Type(smstate) == Mvv(etype(STATE,?,?));Type(my_clock) == Mvv(btype(INTEGER,?,?));Type(current_time) == Mvv(btype(INTEGER,?,?));Type(board_0_O8) == Mvv(btype(INTEGER,?,?));Type(board_0_O7) == Mvv(btype(INTEGER,?,?));Type(board_0_O6) == Mvv(btype(INTEGER,?,?));Type(board_0_O5) == Mvv(btype(INTEGER,?,?));Type(board_0_O4) == Mvv(btype(INTEGER,?,?));Type(board_0_O3) == Mvv(btype(INTEGER,?,?));Type(board_0_O2) == Mvv(btype(INTEGER,?,?));Type(board_0_O1) == Mvv(btype(INTEGER,?,?)))
END
&
THEORY VariablesLocEnvX IS
  Variables_Loc(Implementation(logic_i),user_logic, 1) == (Type(since_value) == Lvl(btype(INTEGER,?,?)));
  Variables_Loc(Implementation(logic_i),read_master_clock, 1) == (Type(master_clock) == Lvl(btype(INTEGER,?,?)));
  Variables_Loc(Implementation(logic_i),since, 1) == (Type(local_time) == Lvl(btype(INTEGER,?,?)));
  Variables_Loc(Implementation(logic_i),state_machine, 1) == (Type(since_DTurning_clock) == Lvl(btype(INTEGER,?,?)));
  Variables_Loc(Implementation(logic_i),state_machine, 2) == (Type(since_D_) == Lvl(btype(INTEGER,?,?)));
  Variables_Loc(Implementation(logic_i),branching_condition_1, 3) == (Type(since_DTurning_clock) == Lvl(btype(INTEGER,?,?)));
  Variables_Loc(Implementation(logic_i),branching_condition_1, 4) == (Type(since_D_) == Lvl(btype(INTEGER,?,?)));
  Variables_Loc(Implementation(logic_i),branching_condition_1, 2) == (Type(boolean_literal_1) == Lvl(btype(BOOL,?,?));Type(boolean_literal_2) == Lvl(btype(BOOL,?,?));Type(condition_1) == Lvl(btype(BOOL,?,?));Type(condition_2) == Lvl(btype(BOOL,?,?));Type(condition_3) == Lvl(btype(BOOL,?,?));Type(condition_4) == Lvl(btype(BOOL,?,?));Type(condition_4_1) == Lvl(btype(BOOL,?,?));Type(condition_4_1_1) == Lvl(btype(BOOL,?,?));Type(condition_4_2) == Lvl(btype(BOOL,?,?));Type(condition_4_2_1) == Lvl(btype(BOOL,?,?));Type(condition_4_3) == Lvl(btype(BOOL,?,?));Type(condition_4_3_1) == Lvl(btype(BOOL,?,?)));
  Variables_Loc(Implementation(logic_i),branching_condition_1, 1) == (Type(since_C_) == Lvl(btype(INTEGER,?,?)));
  Variables_Loc(Implementation(logic_i),nat_7_bits_to_bin_7_bits, 1) == (Type(o_aux) == Lvl(btype(INTEGER,?,?)))
END
&
THEORY TCIntRdX IS
  bxml_with_b0_typing == OK;
  predB0 == OK;
  extended_sees == KO;
  B0check_tab == KO;
  local_op == OK;
  abstract_constants_visible_in_values == KO;
  project_type == SOFTWARE_TYPE;
  event_b_deadlockfreeness == KO;
  variant_clause_mandatory == KO;
  event_b_coverage == KO;
  event_b_exclusivity == KO;
  genFeasibilityPO == KO
END
&
THEORY ListLocalOperationsX IS
  List_Local_Operations(Implementation(logic_i))==(read_master_clock,execute_model_cycle,since,land,lor,lnot,write_output,reset_cycle_timers,reset_outputs,read_model_inputs,write_model_outputs,state_machine,branching_condition_1,nat_7_bits_to_bin_7_bits,moveForward,turn,avoid,enableCollisionDetection,disableCollisionDetection,stop)
END
&
THEORY ListLocalInputX IS
  List_Local_Input(Implementation(logic_i),read_master_clock)==(?);
  List_Local_Input(Implementation(logic_i),execute_model_cycle)==(?);
  List_Local_Input(Implementation(logic_i),since)==(timer);
  List_Local_Input(Implementation(logic_i),land)==(pp,qq);
  List_Local_Input(Implementation(logic_i),lor)==(pp,qq);
  List_Local_Input(Implementation(logic_i),lnot)==(pp);
  List_Local_Input(Implementation(logic_i),write_output)==(nn);
  List_Local_Input(Implementation(logic_i),reset_cycle_timers)==(?);
  List_Local_Input(Implementation(logic_i),reset_outputs)==(?);
  List_Local_Input(Implementation(logic_i),read_model_inputs)==(?);
  List_Local_Input(Implementation(logic_i),write_model_outputs)==(?);
  List_Local_Input(Implementation(logic_i),state_machine)==(?);
  List_Local_Input(Implementation(logic_i),branching_condition_1)==(?);
  List_Local_Input(Implementation(logic_i),nat_7_bits_to_bin_7_bits)==(nn);
  List_Local_Input(Implementation(logic_i),moveForward)==(l_linear);
  List_Local_Input(Implementation(logic_i),turn)==(l_angular);
  List_Local_Input(Implementation(logic_i),avoid)==(?);
  List_Local_Input(Implementation(logic_i),enableCollisionDetection)==(?);
  List_Local_Input(Implementation(logic_i),disableCollisionDetection)==(?);
  List_Local_Input(Implementation(logic_i),stop)==(?)
END
&
THEORY ListLocalOutputX IS
  List_Local_Output(Implementation(logic_i),read_master_clock)==(?);
  List_Local_Output(Implementation(logic_i),execute_model_cycle)==(?);
  List_Local_Output(Implementation(logic_i),since)==(elapsed);
  List_Local_Output(Implementation(logic_i),land)==(result);
  List_Local_Output(Implementation(logic_i),lor)==(result);
  List_Local_Output(Implementation(logic_i),lnot)==(result);
  List_Local_Output(Implementation(logic_i),write_output)==(?);
  List_Local_Output(Implementation(logic_i),reset_cycle_timers)==(?);
  List_Local_Output(Implementation(logic_i),reset_outputs)==(?);
  List_Local_Output(Implementation(logic_i),read_model_inputs)==(?);
  List_Local_Output(Implementation(logic_i),write_model_outputs)==(?);
  List_Local_Output(Implementation(logic_i),state_machine)==(?);
  List_Local_Output(Implementation(logic_i),branching_condition_1)==(?);
  List_Local_Output(Implementation(logic_i),nat_7_bits_to_bin_7_bits)==(o6,o5,o4,o3,o2,o1,o0);
  List_Local_Output(Implementation(logic_i),moveForward)==(?);
  List_Local_Output(Implementation(logic_i),turn)==(?);
  List_Local_Output(Implementation(logic_i),avoid)==(?);
  List_Local_Output(Implementation(logic_i),enableCollisionDetection)==(?);
  List_Local_Output(Implementation(logic_i),disableCollisionDetection)==(?);
  List_Local_Output(Implementation(logic_i),stop)==(?)
END
&
THEORY ListLocalHeaderX IS
  List_Local_Header(Implementation(logic_i),read_master_clock)==(read_master_clock);
  List_Local_Header(Implementation(logic_i),execute_model_cycle)==(execute_model_cycle);
  List_Local_Header(Implementation(logic_i),since)==(elapsed <-- since(timer));
  List_Local_Header(Implementation(logic_i),land)==(result <-- land(pp,qq));
  List_Local_Header(Implementation(logic_i),lor)==(result <-- lor(pp,qq));
  List_Local_Header(Implementation(logic_i),lnot)==(result <-- lnot(pp));
  List_Local_Header(Implementation(logic_i),write_output)==(write_output(nn));
  List_Local_Header(Implementation(logic_i),reset_cycle_timers)==(reset_cycle_timers);
  List_Local_Header(Implementation(logic_i),reset_outputs)==(reset_outputs);
  List_Local_Header(Implementation(logic_i),read_model_inputs)==(read_model_inputs);
  List_Local_Header(Implementation(logic_i),write_model_outputs)==(write_model_outputs);
  List_Local_Header(Implementation(logic_i),state_machine)==(state_machine);
  List_Local_Header(Implementation(logic_i),branching_condition_1)==(branching_condition_1);
  List_Local_Header(Implementation(logic_i),nat_7_bits_to_bin_7_bits)==(o6,o5,o4,o3,o2,o1,o0 <-- nat_7_bits_to_bin_7_bits(nn));
  List_Local_Header(Implementation(logic_i),moveForward)==(moveForward(l_linear));
  List_Local_Header(Implementation(logic_i),turn)==(turn(l_angular));
  List_Local_Header(Implementation(logic_i),avoid)==(avoid);
  List_Local_Header(Implementation(logic_i),enableCollisionDetection)==(enableCollisionDetection);
  List_Local_Header(Implementation(logic_i),disableCollisionDetection)==(disableCollisionDetection);
  List_Local_Header(Implementation(logic_i),stop)==(stop)
END
&
THEORY ListLocalPreconditionX IS
  List_Local_Precondition(Implementation(logic_i),read_master_clock)==(btrue);
  List_Local_Precondition(Implementation(logic_i),execute_model_cycle)==(btrue);
  List_Local_Precondition(Implementation(logic_i),since)==(timer: uint32_t & elapsed: uint32_t);
  List_Local_Precondition(Implementation(logic_i),land)==(pp: BOOL & qq: BOOL & result: BOOL);
  List_Local_Precondition(Implementation(logic_i),lor)==(pp: BOOL & qq: BOOL & result: BOOL);
  List_Local_Precondition(Implementation(logic_i),lnot)==(pp: BOOL & result: BOOL);
  List_Local_Precondition(Implementation(logic_i),write_output)==(nn: uint32_t & nn: 0..max_board_output);
  List_Local_Precondition(Implementation(logic_i),reset_cycle_timers)==(btrue);
  List_Local_Precondition(Implementation(logic_i),reset_outputs)==(btrue);
  List_Local_Precondition(Implementation(logic_i),read_model_inputs)==(btrue);
  List_Local_Precondition(Implementation(logic_i),write_model_outputs)==(btrue);
  List_Local_Precondition(Implementation(logic_i),state_machine)==(btrue);
  List_Local_Precondition(Implementation(logic_i),branching_condition_1)==(btrue);
  List_Local_Precondition(Implementation(logic_i),nat_7_bits_to_bin_7_bits)==(nn: uint32_t & nn: 0..max_board_output & o6: uint8_t & o5: uint8_t & o4: uint8_t & o3: uint8_t & o2: uint8_t & o1: uint8_t & o0: uint8_t);
  List_Local_Precondition(Implementation(logic_i),moveForward)==(l_linear: uint32_t & l_linear: 0..max_board_output);
  List_Local_Precondition(Implementation(logic_i),turn)==(l_angular: uint32_t & l_angular: 0..max_board_output);
  List_Local_Precondition(Implementation(logic_i),avoid)==(btrue);
  List_Local_Precondition(Implementation(logic_i),enableCollisionDetection)==(btrue);
  List_Local_Precondition(Implementation(logic_i),disableCollisionDetection)==(btrue);
  List_Local_Precondition(Implementation(logic_i),stop)==(btrue)
END
&
THEORY ListLocalSubstitutionX IS
  Expanded_List_Local_Substitution(Implementation(logic_i),stop)==(btrue | @(o_IObject_stop$0).(o_IObject_stop$0: uint8_t ==> o_IObject_stop:=o_IObject_stop$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),disableCollisionDetection)==(btrue | @(o_IMove_disableCollisionDetection$0).(o_IMove_disableCollisionDetection$0: uint8_t ==> o_IMove_disableCollisionDetection:=o_IMove_disableCollisionDetection$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),enableCollisionDetection)==(btrue | @(o_IMove_enableCollisionDetection$0).(o_IMove_enableCollisionDetection$0: uint8_t ==> o_IMove_enableCollisionDetection:=o_IMove_enableCollisionDetection$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),avoid)==(btrue | @(o_IMove_avoid$0).(o_IMove_avoid$0: uint8_t ==> o_IMove_avoid:=o_IMove_avoid$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),turn)==(l_angular: uint32_t & l_angular: 0..max_board_output | @(o_IMove_turn$0).(o_IMove_turn$0: uint8_t ==> o_IMove_turn:=o_IMove_turn$0) || @(o_IMove_turn_angular_0$0).(o_IMove_turn_angular_0$0: uint8_t ==> o_IMove_turn_angular_0:=o_IMove_turn_angular_0$0) || @(o_IMove_turn_angular_1$0).(o_IMove_turn_angular_1$0: uint8_t ==> o_IMove_turn_angular_1:=o_IMove_turn_angular_1$0) || @(o_IMove_turn_angular_2$0).(o_IMove_turn_angular_2$0: uint8_t ==> o_IMove_turn_angular_2:=o_IMove_turn_angular_2$0) || @(o_IMove_turn_angular_3$0).(o_IMove_turn_angular_3$0: uint8_t ==> o_IMove_turn_angular_3:=o_IMove_turn_angular_3$0) || @(o_IMove_turn_angular_4$0).(o_IMove_turn_angular_4$0: uint8_t ==> o_IMove_turn_angular_4:=o_IMove_turn_angular_4$0) || @(o_IMove_turn_angular_5$0).(o_IMove_turn_angular_5$0: uint8_t ==> o_IMove_turn_angular_5:=o_IMove_turn_angular_5$0) || @(o_IMove_turn_angular_6$0).(o_IMove_turn_angular_6$0: uint8_t ==> o_IMove_turn_angular_6:=o_IMove_turn_angular_6$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),moveForward)==(l_linear: uint32_t & l_linear: 0..max_board_output | @(o_IMove_moveForward$0).(o_IMove_moveForward$0: uint8_t ==> o_IMove_moveForward:=o_IMove_moveForward$0) || @(o_IMove_moveForward_linear_0$0).(o_IMove_moveForward_linear_0$0: uint8_t ==> o_IMove_moveForward_linear_0:=o_IMove_moveForward_linear_0$0) || @(o_IMove_moveForward_linear_1$0).(o_IMove_moveForward_linear_1$0: uint8_t ==> o_IMove_moveForward_linear_1:=o_IMove_moveForward_linear_1$0) || @(o_IMove_moveForward_linear_2$0).(o_IMove_moveForward_linear_2$0: uint8_t ==> o_IMove_moveForward_linear_2:=o_IMove_moveForward_linear_2$0) || @(o_IMove_moveForward_linear_3$0).(o_IMove_moveForward_linear_3$0: uint8_t ==> o_IMove_moveForward_linear_3:=o_IMove_moveForward_linear_3$0) || @(o_IMove_moveForward_linear_4$0).(o_IMove_moveForward_linear_4$0: uint8_t ==> o_IMove_moveForward_linear_4:=o_IMove_moveForward_linear_4$0) || @(o_IMove_moveForward_linear_5$0).(o_IMove_moveForward_linear_5$0: uint8_t ==> o_IMove_moveForward_linear_5:=o_IMove_moveForward_linear_5$0) || @(o_IMove_moveForward_linear_6$0).(o_IMove_moveForward_linear_6$0: uint8_t ==> o_IMove_moveForward_linear_6:=o_IMove_moveForward_linear_6$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),nat_7_bits_to_bin_7_bits)==(nn: uint32_t & nn: 0..max_board_output & o6: uint8_t & o5: uint8_t & o4: uint8_t & o3: uint8_t & o2: uint8_t & o1: uint8_t & o0: uint8_t | @(o6$0).(o6$0: uint8_t ==> o6:=o6$0) || @(o5$0).(o5$0: uint8_t ==> o5:=o5$0) || @(o4$0).(o4$0: uint8_t ==> o4:=o4$0) || @(o3$0).(o3$0: uint8_t ==> o3:=o3$0) || @(o2$0).(o2$0: uint8_t ==> o2:=o2$0) || @(o1$0).(o1$0: uint8_t ==> o1:=o1$0) || @(o0$0).(o0$0: uint8_t ==> o0:=o0$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),branching_condition_1)==(btrue | @(my_clock$0).(my_clock$0: uint8_t ==> my_clock:=my_clock$0) || @(smstate$0).(smstate$0: STATE ==> smstate:=smstate$0) || @(first_time$0).(first_time$0: BOOL ==> first_time:=first_time$0) || @(SimSquare_cycle_timer$0).(SimSquare_cycle_timer$0: uint32_t ==> SimSquare_cycle_timer:=SimSquare_cycle_timer$0) || @(C_$0).(C_$0: uint32_t ==> C_:=C_$0) || @(D_$0).(D_$0: uint32_t ==> D_:=D_$0) || @(segment$0).(segment$0: uint32_t ==> segment:=segment$0) || @(DTurning_clock$0).(DTurning_clock$0: uint32_t ==> DTurning_clock:=DTurning_clock$0) || @(o_IMove_moveForward$0).(o_IMove_moveForward$0: uint8_t ==> o_IMove_moveForward:=o_IMove_moveForward$0) || @(o_IMove_moveForward_linear_0$0).(o_IMove_moveForward_linear_0$0: uint8_t ==> o_IMove_moveForward_linear_0:=o_IMove_moveForward_linear_0$0) || @(o_IMove_moveForward_linear_1$0).(o_IMove_moveForward_linear_1$0: uint8_t ==> o_IMove_moveForward_linear_1:=o_IMove_moveForward_linear_1$0) || @(o_IMove_moveForward_linear_2$0).(o_IMove_moveForward_linear_2$0: uint8_t ==> o_IMove_moveForward_linear_2:=o_IMove_moveForward_linear_2$0) || @(o_IMove_moveForward_linear_3$0).(o_IMove_moveForward_linear_3$0: uint8_t ==> o_IMove_moveForward_linear_3:=o_IMove_moveForward_linear_3$0) || @(o_IMove_moveForward_linear_4$0).(o_IMove_moveForward_linear_4$0: uint8_t ==> o_IMove_moveForward_linear_4:=o_IMove_moveForward_linear_4$0) || @(o_IMove_moveForward_linear_5$0).(o_IMove_moveForward_linear_5$0: uint8_t ==> o_IMove_moveForward_linear_5:=o_IMove_moveForward_linear_5$0) || @(o_IMove_moveForward_linear_6$0).(o_IMove_moveForward_linear_6$0: uint8_t ==> o_IMove_moveForward_linear_6:=o_IMove_moveForward_linear_6$0) || @(o_IMove_turn$0).(o_IMove_turn$0: uint8_t ==> o_IMove_turn:=o_IMove_turn$0) || @(o_IMove_turn_angular_0$0).(o_IMove_turn_angular_0$0: uint8_t ==> o_IMove_turn_angular_0:=o_IMove_turn_angular_0$0) || @(o_IMove_turn_angular_1$0).(o_IMove_turn_angular_1$0: uint8_t ==> o_IMove_turn_angular_1:=o_IMove_turn_angular_1$0) || @(o_IMove_turn_angular_2$0).(o_IMove_turn_angular_2$0: uint8_t ==> o_IMove_turn_angular_2:=o_IMove_turn_angular_2$0) || @(o_IMove_turn_angular_3$0).(o_IMove_turn_angular_3$0: uint8_t ==> o_IMove_turn_angular_3:=o_IMove_turn_angular_3$0) || @(o_IMove_turn_angular_4$0).(o_IMove_turn_angular_4$0: uint8_t ==> o_IMove_turn_angular_4:=o_IMove_turn_angular_4$0) || @(o_IMove_turn_angular_5$0).(o_IMove_turn_angular_5$0: uint8_t ==> o_IMove_turn_angular_5:=o_IMove_turn_angular_5$0) || @(o_IMove_turn_angular_6$0).(o_IMove_turn_angular_6$0: uint8_t ==> o_IMove_turn_angular_6:=o_IMove_turn_angular_6$0) || @(o_IMove_avoid$0).(o_IMove_avoid$0: uint8_t ==> o_IMove_avoid:=o_IMove_avoid$0) || @(o_IMove_enableCollisionDetection$0).(o_IMove_enableCollisionDetection$0: uint8_t ==> o_IMove_enableCollisionDetection:=o_IMove_enableCollisionDetection$0) || @(o_IMove_disableCollisionDetection$0).(o_IMove_disableCollisionDetection$0: uint8_t ==> o_IMove_disableCollisionDetection:=o_IMove_disableCollisionDetection$0) || @(o_IObject_stop$0).(o_IObject_stop$0: uint8_t ==> o_IObject_stop:=o_IObject_stop$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),state_machine)==(btrue | @(my_clock$0).(my_clock$0: uint8_t ==> my_clock:=my_clock$0) || @(smstate$0).(smstate$0: STATE ==> smstate:=smstate$0) || @(first_time$0).(first_time$0: BOOL ==> first_time:=first_time$0) || @(SimSquare_cycle_timer$0).(SimSquare_cycle_timer$0: uint32_t ==> SimSquare_cycle_timer:=SimSquare_cycle_timer$0) || @(C_$0).(C_$0: uint32_t ==> C_:=C_$0) || @(D_$0).(D_$0: uint32_t ==> D_:=D_$0) || @(segment$0).(segment$0: uint32_t ==> segment:=segment$0) || @(DTurning_clock$0).(DTurning_clock$0: uint32_t ==> DTurning_clock:=DTurning_clock$0) || @(o_IMove_moveForward$0).(o_IMove_moveForward$0: uint8_t ==> o_IMove_moveForward:=o_IMove_moveForward$0) || @(o_IMove_moveForward_linear_0$0).(o_IMove_moveForward_linear_0$0: uint8_t ==> o_IMove_moveForward_linear_0:=o_IMove_moveForward_linear_0$0) || @(o_IMove_moveForward_linear_1$0).(o_IMove_moveForward_linear_1$0: uint8_t ==> o_IMove_moveForward_linear_1:=o_IMove_moveForward_linear_1$0) || @(o_IMove_moveForward_linear_2$0).(o_IMove_moveForward_linear_2$0: uint8_t ==> o_IMove_moveForward_linear_2:=o_IMove_moveForward_linear_2$0) || @(o_IMove_moveForward_linear_3$0).(o_IMove_moveForward_linear_3$0: uint8_t ==> o_IMove_moveForward_linear_3:=o_IMove_moveForward_linear_3$0) || @(o_IMove_moveForward_linear_4$0).(o_IMove_moveForward_linear_4$0: uint8_t ==> o_IMove_moveForward_linear_4:=o_IMove_moveForward_linear_4$0) || @(o_IMove_moveForward_linear_5$0).(o_IMove_moveForward_linear_5$0: uint8_t ==> o_IMove_moveForward_linear_5:=o_IMove_moveForward_linear_5$0) || @(o_IMove_moveForward_linear_6$0).(o_IMove_moveForward_linear_6$0: uint8_t ==> o_IMove_moveForward_linear_6:=o_IMove_moveForward_linear_6$0) || @(o_IMove_turn$0).(o_IMove_turn$0: uint8_t ==> o_IMove_turn:=o_IMove_turn$0) || @(o_IMove_turn_angular_0$0).(o_IMove_turn_angular_0$0: uint8_t ==> o_IMove_turn_angular_0:=o_IMove_turn_angular_0$0) || @(o_IMove_turn_angular_1$0).(o_IMove_turn_angular_1$0: uint8_t ==> o_IMove_turn_angular_1:=o_IMove_turn_angular_1$0) || @(o_IMove_turn_angular_2$0).(o_IMove_turn_angular_2$0: uint8_t ==> o_IMove_turn_angular_2:=o_IMove_turn_angular_2$0) || @(o_IMove_turn_angular_3$0).(o_IMove_turn_angular_3$0: uint8_t ==> o_IMove_turn_angular_3:=o_IMove_turn_angular_3$0) || @(o_IMove_turn_angular_4$0).(o_IMove_turn_angular_4$0: uint8_t ==> o_IMove_turn_angular_4:=o_IMove_turn_angular_4$0) || @(o_IMove_turn_angular_5$0).(o_IMove_turn_angular_5$0: uint8_t ==> o_IMove_turn_angular_5:=o_IMove_turn_angular_5$0) || @(o_IMove_turn_angular_6$0).(o_IMove_turn_angular_6$0: uint8_t ==> o_IMove_turn_angular_6:=o_IMove_turn_angular_6$0) || @(o_IMove_avoid$0).(o_IMove_avoid$0: uint8_t ==> o_IMove_avoid:=o_IMove_avoid$0) || @(o_IMove_enableCollisionDetection$0).(o_IMove_enableCollisionDetection$0: uint8_t ==> o_IMove_enableCollisionDetection:=o_IMove_enableCollisionDetection$0) || @(o_IMove_disableCollisionDetection$0).(o_IMove_disableCollisionDetection$0: uint8_t ==> o_IMove_disableCollisionDetection:=o_IMove_disableCollisionDetection$0) || @(o_IObject_stop$0).(o_IObject_stop$0: uint8_t ==> o_IObject_stop:=o_IObject_stop$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),write_model_outputs)==(btrue | @(board_0_O1$0).(board_0_O1$0: uint8_t ==> board_0_O1:=board_0_O1$0) || @(board_0_O2$0).(board_0_O2$0: uint8_t ==> board_0_O2:=board_0_O2$0) || @(board_0_O3$0).(board_0_O3$0: uint8_t ==> board_0_O3:=board_0_O3$0) || @(board_0_O4$0).(board_0_O4$0: uint8_t ==> board_0_O4:=board_0_O4$0) || @(board_0_O5$0).(board_0_O5$0: uint8_t ==> board_0_O5:=board_0_O5$0) || @(board_0_O6$0).(board_0_O6$0: uint8_t ==> board_0_O6:=board_0_O6$0) || @(board_0_O7$0).(board_0_O7$0: uint8_t ==> board_0_O7:=board_0_O7$0) || @(board_0_O8$0).(board_0_O8$0: uint8_t ==> board_0_O8:=board_0_O8$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),read_model_inputs)==(btrue | @(i_IObject_collisionDetected$0).(i_IObject_collisionDetected$0: uint8_t ==> i_IObject_collisionDetected:=i_IObject_collisionDetected$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),reset_outputs)==(btrue | @(board_0_O1$0).(board_0_O1$0: uint8_t ==> board_0_O1:=board_0_O1$0) || @(board_0_O2$0).(board_0_O2$0: uint8_t ==> board_0_O2:=board_0_O2$0) || @(board_0_O3$0).(board_0_O3$0: uint8_t ==> board_0_O3:=board_0_O3$0) || @(board_0_O4$0).(board_0_O4$0: uint8_t ==> board_0_O4:=board_0_O4$0) || @(board_0_O5$0).(board_0_O5$0: uint8_t ==> board_0_O5:=board_0_O5$0) || @(board_0_O6$0).(board_0_O6$0: uint8_t ==> board_0_O6:=board_0_O6$0) || @(board_0_O7$0).(board_0_O7$0: uint8_t ==> board_0_O7:=board_0_O7$0) || @(board_0_O8$0).(board_0_O8$0: uint8_t ==> board_0_O8:=board_0_O8$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),reset_cycle_timers)==(btrue | @(SimSquare_cycle_timer$0).(SimSquare_cycle_timer$0: uint32_t ==> SimSquare_cycle_timer:=SimSquare_cycle_timer$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),write_output)==(nn: uint32_t & nn: 0..max_board_output | @(board_0_O1$0).(board_0_O1$0: uint8_t ==> board_0_O1:=board_0_O1$0) || @(board_0_O2$0).(board_0_O2$0: uint8_t ==> board_0_O2:=board_0_O2$0) || @(board_0_O3$0).(board_0_O3$0: uint8_t ==> board_0_O3:=board_0_O3$0) || @(board_0_O4$0).(board_0_O4$0: uint8_t ==> board_0_O4:=board_0_O4$0) || @(board_0_O5$0).(board_0_O5$0: uint8_t ==> board_0_O5:=board_0_O5$0) || @(board_0_O6$0).(board_0_O6$0: uint8_t ==> board_0_O6:=board_0_O6$0) || @(board_0_O7$0).(board_0_O7$0: uint8_t ==> board_0_O7:=board_0_O7$0) || @(board_0_O8$0).(board_0_O8$0: uint8_t ==> board_0_O8:=board_0_O8$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),lnot)==(pp: BOOL & result: BOOL | @(result$0).(result$0: BOOL ==> result:=result$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),lor)==(pp: BOOL & qq: BOOL & result: BOOL | @(result$0).(result$0: BOOL ==> result:=result$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),land)==(pp: BOOL & qq: BOOL & result: BOOL | @(result$0).(result$0: BOOL ==> result:=result$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),since)==(timer: uint32_t & elapsed: uint32_t | @(elapsed$0).(elapsed$0: uint32_t ==> elapsed:=elapsed$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),execute_model_cycle)==(btrue | @(my_clock$0).(my_clock$0: uint8_t ==> my_clock:=my_clock$0) || @(smstate$0).(smstate$0: STATE ==> smstate:=smstate$0) || @(first_time$0).(first_time$0: BOOL ==> first_time:=first_time$0) || @(SimSquare_cycle_timer$0).(SimSquare_cycle_timer$0: uint32_t ==> SimSquare_cycle_timer:=SimSquare_cycle_timer$0) || @(C_$0).(C_$0: uint32_t ==> C_:=C_$0) || @(D_$0).(D_$0: uint32_t ==> D_:=D_$0) || @(segment$0).(segment$0: uint32_t ==> segment:=segment$0) || @(DTurning_clock$0).(DTurning_clock$0: uint32_t ==> DTurning_clock:=DTurning_clock$0) || @(o_IMove_moveForward$0).(o_IMove_moveForward$0: uint8_t ==> o_IMove_moveForward:=o_IMove_moveForward$0) || @(o_IMove_moveForward_linear_0$0).(o_IMove_moveForward_linear_0$0: uint8_t ==> o_IMove_moveForward_linear_0:=o_IMove_moveForward_linear_0$0) || @(o_IMove_moveForward_linear_1$0).(o_IMove_moveForward_linear_1$0: uint8_t ==> o_IMove_moveForward_linear_1:=o_IMove_moveForward_linear_1$0) || @(o_IMove_moveForward_linear_2$0).(o_IMove_moveForward_linear_2$0: uint8_t ==> o_IMove_moveForward_linear_2:=o_IMove_moveForward_linear_2$0) || @(o_IMove_moveForward_linear_3$0).(o_IMove_moveForward_linear_3$0: uint8_t ==> o_IMove_moveForward_linear_3:=o_IMove_moveForward_linear_3$0) || @(o_IMove_moveForward_linear_4$0).(o_IMove_moveForward_linear_4$0: uint8_t ==> o_IMove_moveForward_linear_4:=o_IMove_moveForward_linear_4$0) || @(o_IMove_moveForward_linear_5$0).(o_IMove_moveForward_linear_5$0: uint8_t ==> o_IMove_moveForward_linear_5:=o_IMove_moveForward_linear_5$0) || @(o_IMove_moveForward_linear_6$0).(o_IMove_moveForward_linear_6$0: uint8_t ==> o_IMove_moveForward_linear_6:=o_IMove_moveForward_linear_6$0) || @(o_IMove_turn$0).(o_IMove_turn$0: uint8_t ==> o_IMove_turn:=o_IMove_turn$0) || @(o_IMove_turn_angular_0$0).(o_IMove_turn_angular_0$0: uint8_t ==> o_IMove_turn_angular_0:=o_IMove_turn_angular_0$0) || @(o_IMove_turn_angular_1$0).(o_IMove_turn_angular_1$0: uint8_t ==> o_IMove_turn_angular_1:=o_IMove_turn_angular_1$0) || @(o_IMove_turn_angular_2$0).(o_IMove_turn_angular_2$0: uint8_t ==> o_IMove_turn_angular_2:=o_IMove_turn_angular_2$0) || @(o_IMove_turn_angular_3$0).(o_IMove_turn_angular_3$0: uint8_t ==> o_IMove_turn_angular_3:=o_IMove_turn_angular_3$0) || @(o_IMove_turn_angular_4$0).(o_IMove_turn_angular_4$0: uint8_t ==> o_IMove_turn_angular_4:=o_IMove_turn_angular_4$0) || @(o_IMove_turn_angular_5$0).(o_IMove_turn_angular_5$0: uint8_t ==> o_IMove_turn_angular_5:=o_IMove_turn_angular_5$0) || @(o_IMove_turn_angular_6$0).(o_IMove_turn_angular_6$0: uint8_t ==> o_IMove_turn_angular_6:=o_IMove_turn_angular_6$0) || @(o_IMove_avoid$0).(o_IMove_avoid$0: uint8_t ==> o_IMove_avoid:=o_IMove_avoid$0) || @(o_IMove_enableCollisionDetection$0).(o_IMove_enableCollisionDetection$0: uint8_t ==> o_IMove_enableCollisionDetection:=o_IMove_enableCollisionDetection$0) || @(o_IMove_disableCollisionDetection$0).(o_IMove_disableCollisionDetection$0: uint8_t ==> o_IMove_disableCollisionDetection:=o_IMove_disableCollisionDetection$0) || @(o_IObject_stop$0).(o_IObject_stop$0: uint8_t ==> o_IObject_stop:=o_IObject_stop$0));
  Expanded_List_Local_Substitution(Implementation(logic_i),read_master_clock)==(btrue | @(current_time$0).(current_time$0: uint32_t ==> current_time:=current_time$0) || @(my_clock$0).(my_clock$0: uint8_t ==> my_clock:=my_clock$0));
  List_Local_Substitution(Implementation(logic_i),read_master_clock)==(current_time:: uint32_t || my_clock:: uint8_t);
  List_Local_Substitution(Implementation(logic_i),execute_model_cycle)==(my_clock:: uint8_t || smstate:: STATE || first_time:: BOOL || SimSquare_cycle_timer:: uint32_t || C_:: uint32_t || D_:: uint32_t || segment:: uint32_t || DTurning_clock:: uint32_t || o_IMove_moveForward:: uint8_t || o_IMove_moveForward_linear_0:: uint8_t || o_IMove_moveForward_linear_1:: uint8_t || o_IMove_moveForward_linear_2:: uint8_t || o_IMove_moveForward_linear_3:: uint8_t || o_IMove_moveForward_linear_4:: uint8_t || o_IMove_moveForward_linear_5:: uint8_t || o_IMove_moveForward_linear_6:: uint8_t || o_IMove_turn:: uint8_t || o_IMove_turn_angular_0:: uint8_t || o_IMove_turn_angular_1:: uint8_t || o_IMove_turn_angular_2:: uint8_t || o_IMove_turn_angular_3:: uint8_t || o_IMove_turn_angular_4:: uint8_t || o_IMove_turn_angular_5:: uint8_t || o_IMove_turn_angular_6:: uint8_t || o_IMove_avoid:: uint8_t || o_IMove_enableCollisionDetection:: uint8_t || o_IMove_disableCollisionDetection:: uint8_t || o_IObject_stop:: uint8_t);
  List_Local_Substitution(Implementation(logic_i),since)==(elapsed:: uint32_t);
  List_Local_Substitution(Implementation(logic_i),land)==(result:: BOOL);
  List_Local_Substitution(Implementation(logic_i),lor)==(result:: BOOL);
  List_Local_Substitution(Implementation(logic_i),lnot)==(result:: BOOL);
  List_Local_Substitution(Implementation(logic_i),write_output)==(board_0_O1:: uint8_t || board_0_O2:: uint8_t || board_0_O3:: uint8_t || board_0_O4:: uint8_t || board_0_O5:: uint8_t || board_0_O6:: uint8_t || board_0_O7:: uint8_t || board_0_O8:: uint8_t);
  List_Local_Substitution(Implementation(logic_i),reset_cycle_timers)==(SimSquare_cycle_timer:: uint32_t);
  List_Local_Substitution(Implementation(logic_i),reset_outputs)==(board_0_O1:: uint8_t || board_0_O2:: uint8_t || board_0_O3:: uint8_t || board_0_O4:: uint8_t || board_0_O5:: uint8_t || board_0_O6:: uint8_t || board_0_O7:: uint8_t || board_0_O8:: uint8_t);
  List_Local_Substitution(Implementation(logic_i),read_model_inputs)==(i_IObject_collisionDetected:: uint8_t);
  List_Local_Substitution(Implementation(logic_i),write_model_outputs)==(board_0_O1:: uint8_t || board_0_O2:: uint8_t || board_0_O3:: uint8_t || board_0_O4:: uint8_t || board_0_O5:: uint8_t || board_0_O6:: uint8_t || board_0_O7:: uint8_t || board_0_O8:: uint8_t);
  List_Local_Substitution(Implementation(logic_i),state_machine)==(my_clock:: uint8_t || smstate:: STATE || first_time:: BOOL || SimSquare_cycle_timer:: uint32_t || C_:: uint32_t || D_:: uint32_t || segment:: uint32_t || DTurning_clock:: uint32_t || o_IMove_moveForward:: uint8_t || o_IMove_moveForward_linear_0:: uint8_t || o_IMove_moveForward_linear_1:: uint8_t || o_IMove_moveForward_linear_2:: uint8_t || o_IMove_moveForward_linear_3:: uint8_t || o_IMove_moveForward_linear_4:: uint8_t || o_IMove_moveForward_linear_5:: uint8_t || o_IMove_moveForward_linear_6:: uint8_t || o_IMove_turn:: uint8_t || o_IMove_turn_angular_0:: uint8_t || o_IMove_turn_angular_1:: uint8_t || o_IMove_turn_angular_2:: uint8_t || o_IMove_turn_angular_3:: uint8_t || o_IMove_turn_angular_4:: uint8_t || o_IMove_turn_angular_5:: uint8_t || o_IMove_turn_angular_6:: uint8_t || o_IMove_avoid:: uint8_t || o_IMove_enableCollisionDetection:: uint8_t || o_IMove_disableCollisionDetection:: uint8_t || o_IObject_stop:: uint8_t);
  List_Local_Substitution(Implementation(logic_i),branching_condition_1)==(my_clock:: uint8_t || smstate:: STATE || first_time:: BOOL || SimSquare_cycle_timer:: uint32_t || C_:: uint32_t || D_:: uint32_t || segment:: uint32_t || DTurning_clock:: uint32_t || o_IMove_moveForward:: uint8_t || o_IMove_moveForward_linear_0:: uint8_t || o_IMove_moveForward_linear_1:: uint8_t || o_IMove_moveForward_linear_2:: uint8_t || o_IMove_moveForward_linear_3:: uint8_t || o_IMove_moveForward_linear_4:: uint8_t || o_IMove_moveForward_linear_5:: uint8_t || o_IMove_moveForward_linear_6:: uint8_t || o_IMove_turn:: uint8_t || o_IMove_turn_angular_0:: uint8_t || o_IMove_turn_angular_1:: uint8_t || o_IMove_turn_angular_2:: uint8_t || o_IMove_turn_angular_3:: uint8_t || o_IMove_turn_angular_4:: uint8_t || o_IMove_turn_angular_5:: uint8_t || o_IMove_turn_angular_6:: uint8_t || o_IMove_avoid:: uint8_t || o_IMove_enableCollisionDetection:: uint8_t || o_IMove_disableCollisionDetection:: uint8_t || o_IObject_stop:: uint8_t);
  List_Local_Substitution(Implementation(logic_i),nat_7_bits_to_bin_7_bits)==(o6:: uint8_t || o5:: uint8_t || o4:: uint8_t || o3:: uint8_t || o2:: uint8_t || o1:: uint8_t || o0:: uint8_t);
  List_Local_Substitution(Implementation(logic_i),moveForward)==(o_IMove_moveForward:: uint8_t || o_IMove_moveForward_linear_0:: uint8_t || o_IMove_moveForward_linear_1:: uint8_t || o_IMove_moveForward_linear_2:: uint8_t || o_IMove_moveForward_linear_3:: uint8_t || o_IMove_moveForward_linear_4:: uint8_t || o_IMove_moveForward_linear_5:: uint8_t || o_IMove_moveForward_linear_6:: uint8_t);
  List_Local_Substitution(Implementation(logic_i),turn)==(o_IMove_turn:: uint8_t || o_IMove_turn_angular_0:: uint8_t || o_IMove_turn_angular_1:: uint8_t || o_IMove_turn_angular_2:: uint8_t || o_IMove_turn_angular_3:: uint8_t || o_IMove_turn_angular_4:: uint8_t || o_IMove_turn_angular_5:: uint8_t || o_IMove_turn_angular_6:: uint8_t);
  List_Local_Substitution(Implementation(logic_i),avoid)==(o_IMove_avoid:: uint8_t);
  List_Local_Substitution(Implementation(logic_i),enableCollisionDetection)==(o_IMove_enableCollisionDetection:: uint8_t);
  List_Local_Substitution(Implementation(logic_i),disableCollisionDetection)==(o_IMove_disableCollisionDetection:: uint8_t);
  List_Local_Substitution(Implementation(logic_i),stop)==(o_IObject_stop:: uint8_t)
END
&
THEORY TypingPredicateX IS
  TypingPredicate(Implementation(logic_i))==(board_0_O1: INTEGER & board_0_O2: INTEGER & board_0_O3: INTEGER & board_0_O4: INTEGER & board_0_O5: INTEGER & board_0_O6: INTEGER & board_0_O7: INTEGER & board_0_O8: INTEGER & current_time: INTEGER & my_clock: INTEGER & smstate: STATE & first_time: BOOL & SimSquare_cycle_timer: INTEGER & C_: INTEGER & D_: INTEGER & segment: INTEGER & DTurning_clock: INTEGER & i_IObject_collisionDetected: INTEGER & o_IMove_moveForward: INTEGER & o_IMove_moveForward_linear_0: INTEGER & o_IMove_moveForward_linear_1: INTEGER & o_IMove_moveForward_linear_2: INTEGER & o_IMove_moveForward_linear_3: INTEGER & o_IMove_moveForward_linear_4: INTEGER & o_IMove_moveForward_linear_5: INTEGER & o_IMove_moveForward_linear_6: INTEGER & o_IMove_turn: INTEGER & o_IMove_turn_angular_0: INTEGER & o_IMove_turn_angular_1: INTEGER & o_IMove_turn_angular_2: INTEGER & o_IMove_turn_angular_3: INTEGER & o_IMove_turn_angular_4: INTEGER & o_IMove_turn_angular_5: INTEGER & o_IMove_turn_angular_6: INTEGER & o_IMove_avoid: INTEGER & o_IMove_enableCollisionDetection: INTEGER & o_IMove_disableCollisionDetection: INTEGER & o_IObject_stop: INTEGER)
END
&
THEORY ImportedVariablesListX END
&
THEORY ListLocalOpInvariantX IS
  LocalOp_Expanded_Invariant(Implementation(logic_i),stop)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),disableCollisionDetection)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),enableCollisionDetection)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),avoid)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),turn)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),moveForward)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),nat_7_bits_to_bin_7_bits)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),branching_condition_1)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),state_machine)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),write_model_outputs)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),read_model_inputs)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),reset_outputs)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),reset_cycle_timers)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),write_output)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),lnot)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),lor)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),land)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),since)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),execute_model_cycle)==(btrue);
  LocalOp_Expanded_Invariant(Implementation(logic_i),read_master_clock)==(btrue)
END
)
